// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package wakeupv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/helioslabs/gozw/command-class"
)

const CommandIntervalCapabilitiesReport commandclass.CommandID = 0x0A

func init() {
	gob.Register(IntervalCapabilitiesReport{})
	commandclass.Register(commandclass.CommandIdentifier{
		CommandClass: commandclass.CommandClassID(0x84),
		Command:      commandclass.CommandID(0x0A),
		Version:      2,
	}, NewIntervalCapabilitiesReport)
}

func NewIntervalCapabilitiesReport() commandclass.Command {
	return &IntervalCapabilitiesReport{}
}

// <no value>
type IntervalCapabilitiesReport struct {
	MinimumWakeUpIntervalSeconds uint32

	MaximumWakeUpIntervalSeconds uint32

	DefaultWakeUpIntervalSeconds uint32

	WakeUpIntervalStepSeconds uint32
}

func (cmd IntervalCapabilitiesReport) CommandClassID() commandclass.CommandClassID {
	return 0x84
}

func (cmd IntervalCapabilitiesReport) CommandID() commandclass.CommandID {
	return CommandIntervalCapabilitiesReport
}

func (cmd IntervalCapabilitiesReport) CommandIDString() string {
	return "WAKE_UP_INTERVAL_CAPABILITIES_REPORT"
}

func (cmd *IntervalCapabilitiesReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinimumWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaximumWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DefaultWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.WakeUpIntervalStepSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	return nil
}

func (cmd *IntervalCapabilitiesReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MinimumWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaximumWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DefaultWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.WakeUpIntervalStepSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	return
}
