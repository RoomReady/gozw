// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package clock

import (
	"encoding/gob"
	"errors"

	"github.com/helioslabs/gozw/command-class"
)

const CommandSet commandclass.CommandID = 0x04

func init() {
	gob.Register(Set{})
	commandclass.Register(commandclass.CommandIdentifier{
		CommandClass: commandclass.CommandClassID(0x81),
		Command:      commandclass.CommandID(0x04),
		Version:      1,
	}, NewSet)
}

func NewSet() commandclass.Command {
	return &Set{}
}

// <no value>
type Set struct {
	Level struct {
		Hour byte

		Weekday byte
	}

	Minute byte
}

func (cmd Set) CommandClassID() commandclass.CommandClassID {
	return 0x81
}

func (cmd Set) CommandID() commandclass.CommandID {
	return CommandSet
}

func (cmd Set) CommandIDString() string {
	return "CLOCK_SET"
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.Hour = (payload[i] & 0x1F)

	cmd.Level.Weekday = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Minute = payload[i]
	i++

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Level.Hour) & byte(0x1F)

		val |= (cmd.Level.Weekday << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.Minute)

	return
}
