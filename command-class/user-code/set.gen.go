// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package usercode

import (
	"encoding/gob"
	"errors"

	"github.com/helioslabs/gozw/command-class"
)

const CommandSet commandclass.CommandID = 0x01

func init() {
	gob.Register(Set{})
	commandclass.Register(commandclass.CommandIdentifier{
		CommandClass: commandclass.CommandClassID(0x63),
		Command:      commandclass.CommandID(0x01),
		Version:      1,
	}, NewSet)
}

func NewSet() commandclass.Command {
	return &Set{}
}

// <no value>
type Set struct {
	UserIdentifier byte

	UserIdStatus byte

	UserCode []byte
}

func (cmd Set) CommandClassID() commandclass.CommandClassID {
	return 0x63
}

func (cmd Set) CommandID() commandclass.CommandID {
	return CommandSet
}

func (cmd Set) CommandIDString() string {
	return "USER_CODE_SET"
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.UserIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.UserIdStatus = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.UserCode = payload[i:]

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.UserIdentifier)

	payload = append(payload, cmd.UserIdStatus)

	payload = append(payload, cmd.UserCode...)

	return
}
