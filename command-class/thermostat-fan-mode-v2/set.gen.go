// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package thermostatfanmodev2

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(Set{})
}

// <no value>
type Set struct {
	Level struct {
		Off bool

		FanMode byte
	}
}

func (cmd Set) CommandClassID() byte {
	return 0x44
}

func (cmd Set) CommandID() byte {
	return byte(CommandSet)
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.FanMode = (payload[i] & 0x0F)

	cmd.Level.Off = payload[i]&0x80 == 0x80

	i += 1

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = cmd.CommandClassID()
	payload[1] = cmd.CommandID()

	{
		var val byte

		val |= (cmd.Level.FanMode) & byte(0x0F)

		if cmd.Level.Off {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
