// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package versionv2

import (
	"encoding/gob"
	"errors"

	"github.com/helioslabs/gozw/command-class"
)

const CommandCommandClassGet commandclass.CommandID = 0x13

func init() {
	gob.Register(CommandClassGet{})
	commandclass.Register(commandclass.CommandIdentifier{
		CommandClass: commandclass.CommandClassID(0x86),
		Command:      commandclass.CommandID(0x13),
		Version:      2,
	}, NewCommandClassGet)
}

func NewCommandClassGet() commandclass.Command {
	return &CommandClassGet{}
}

// <no value>
type CommandClassGet struct {
	RequestedCommandClass byte
}

func (cmd CommandClassGet) CommandClassID() commandclass.CommandClassID {
	return 0x86
}

func (cmd CommandClassGet) CommandID() commandclass.CommandID {
	return CommandCommandClassGet
}

func (cmd CommandClassGet) CommandIDString() string {
	return "VERSION_COMMAND_CLASS_GET"
}

func (cmd *CommandClassGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RequestedCommandClass = payload[i]
	i++

	return nil
}

func (cmd *CommandClassGet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.RequestedCommandClass)

	return
}
