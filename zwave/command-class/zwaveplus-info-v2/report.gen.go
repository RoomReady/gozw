// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package zwaveplusinfov2

import (
	"encoding/binary"
	"errors"
)

// <no value>

type ZwaveplusInfoReport struct {
	ZWaveVersion byte

	RoleType byte

	NodeType byte

	InstallerIconType uint16

	UserIconType uint16
}

func (cmd *ZwaveplusInfoReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ZWaveVersion = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RoleType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.InstallerIconType = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.UserIconType = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *ZwaveplusInfoReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.ZWaveVersion)

	payload = append(payload, cmd.RoleType)

	payload = append(payload, cmd.NodeType)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.InstallerIconType)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.UserIconType)
		payload = append(payload, buf...)
	}

	return
}
