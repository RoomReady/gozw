// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package notificationv4

import "errors"

// <no value>

type NotificationReport struct {
	V1AlarmType byte

	V1AlarmLevel byte

	ZensorNetSourceNodeId byte

	NotificationStatus byte

	NotificationType byte

	Event byte

	Properties1 struct {
		EventParametersLength byte

		Sequence bool
	}

	EventParameter []byte

	SequenceNumber byte
}

func (cmd *NotificationReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.V1AlarmType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.V1AlarmLevel = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ZensorNetSourceNodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NotificationStatus = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NotificationType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Event = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.EventParametersLength = (payload[i] & 0x1F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Sequence = true
	} else {
		cmd.Properties1.Sequence = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.EventParameter = payload[i : i+6]
	i += 6

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SequenceNumber = payload[i]
	i++

	return nil
}

func (cmd *NotificationReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.V1AlarmType)

	payload = append(payload, cmd.V1AlarmLevel)

	payload = append(payload, cmd.ZensorNetSourceNodeId)

	payload = append(payload, cmd.NotificationStatus)

	payload = append(payload, cmd.NotificationType)

	payload = append(payload, cmd.Event)

	{
		var val byte

		val |= (cmd.Properties1.EventParametersLength) & byte(0x1F)

		if cmd.Properties1.Sequence {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	if cmd.EventParameter != nil && len(cmd.EventParameter) > 0 {
		payload = append(payload, cmd.EventParameter...)
	}

	payload = append(payload, cmd.SequenceNumber)

	return
}
