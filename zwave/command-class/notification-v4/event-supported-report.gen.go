// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package notificationv4

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(EventSupportedReport{})
}

// <no value>
type EventSupportedReport struct {
	NotificationType byte

	Properties1 struct {
		NumberOfBitMasks byte
	}

	BitMask byte
}

func (cmd *EventSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NotificationType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NumberOfBitMasks = (payload[i] & 0x1F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.BitMask = payload[i]
	i++

	return nil
}

func (cmd *EventSupportedReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.NotificationType)

	{
		var val byte

		val |= (cmd.Properties1.NumberOfBitMasks) & byte(0x1F)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.BitMask)

	return
}
