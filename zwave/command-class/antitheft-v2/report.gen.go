// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package antitheftv2

import (
	"encoding/binary"
	"errors"
)

// <no value>

type AntitheftReport struct {
	AntiTheftProtectionStatus byte

	ManufacturerId uint16

	AntiTheftHintNumberBytes byte

	AntiTheftHintByte []byte
}

func (cmd *AntitheftReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AntiTheftProtectionStatus = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ManufacturerId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AntiTheftHintNumberBytes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AntiTheftHintByte = payload[i : i+2]
	i += 2

	return nil
}

func (cmd *AntitheftReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.AntiTheftProtectionStatus)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ManufacturerId)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.AntiTheftHintNumberBytes)

	if cmd.AntiTheftHintByte != nil && len(cmd.AntiTheftHintByte) > 0 {
		payload = append(payload, cmd.AntiTheftHintByte...)
	}

	return
}
