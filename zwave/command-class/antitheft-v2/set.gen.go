// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package antitheftv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(AntitheftSet{})
}

// <no value>
type AntitheftSet struct {
	Properties1 struct {
		NumberOfMagicCodeBytes byte

		Enable bool
	}

	MagicCode []byte

	ManufacturerId uint16

	AntiTheftHintNumberBytes byte

	AntiTheftHintByte []byte
}

func (cmd *AntitheftSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NumberOfMagicCodeBytes = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Enable = true
	} else {
		cmd.Properties1.Enable = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MagicCode = payload[i : i+0]
	i += 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ManufacturerId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AntiTheftHintNumberBytes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AntiTheftHintByte = payload[i : i+3]
	i += 3

	return nil
}

func (cmd *AntitheftSet) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.NumberOfMagicCodeBytes) & byte(0x7F)

		if cmd.Properties1.Enable {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	if cmd.MagicCode != nil && len(cmd.MagicCode) > 0 {
		payload = append(payload, cmd.MagicCode...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ManufacturerId)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.AntiTheftHintNumberBytes)

	if cmd.AntiTheftHintByte != nil && len(cmd.AntiTheftHintByte) > 0 {
		payload = append(payload, cmd.AntiTheftHintByte...)
	}

	return
}
