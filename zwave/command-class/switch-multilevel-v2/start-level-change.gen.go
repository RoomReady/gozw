// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package switchmultilevelv2

import "errors"

// <no value>

type SwitchMultilevelStartLevelChange struct {
	Properties1 struct {
		IgnoreStartLevel bool

		UpDown bool
	}

	StartLevel byte

	DimmingDuration byte
}

func (cmd *SwitchMultilevelStartLevelChange) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if payload[i]&0x20 == 0x20 {
		cmd.Properties1.IgnoreStartLevel = true
	} else {
		cmd.Properties1.IgnoreStartLevel = false
	}

	if payload[i]&0x40 == 0x40 {
		cmd.Properties1.UpDown = true
	} else {
		cmd.Properties1.UpDown = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartLevel = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DimmingDuration = payload[i]
	i++

	return nil
}

func (cmd *SwitchMultilevelStartLevelChange) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		if cmd.Properties1.IgnoreStartLevel {
			val |= byte(0x20) // flip bits on
		} else {
			val &= ^byte(0x20) // flip bits off
		}

		if cmd.Properties1.UpDown {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.StartLevel)

	payload = append(payload, cmd.DimmingDuration)

	return
}
