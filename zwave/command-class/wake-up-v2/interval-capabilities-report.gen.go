// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package wakeupv2

import (
	"encoding/binary"
	"errors"
)

// <no value>

type WakeUpIntervalCapabilitiesReport struct {
	MinimumWakeUpIntervalSeconds uint32

	MaximumWakeUpIntervalSeconds uint32

	DefaultWakeUpIntervalSeconds uint32

	WakeUpIntervalStepSeconds uint32
}

func (cmd *WakeUpIntervalCapabilitiesReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinimumWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaximumWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DefaultWakeUpIntervalSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.WakeUpIntervalStepSeconds = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	return nil
}

func (cmd *WakeUpIntervalCapabilitiesReport) MarshalBinary() (payload []byte, err error) {

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MinimumWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaximumWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DefaultWakeUpIntervalSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.WakeUpIntervalStepSeconds)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	return
}
