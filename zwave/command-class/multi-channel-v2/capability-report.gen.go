// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package multichannelv2

import "errors"

// <no value>

type MultiChannelCapabilityReport struct {
	Properties1 struct {
		EndPoint byte

		Dynamic bool
	}

	GenericDeviceClass byte

	SpecificDeviceClass byte

	CommandClass []byte
}

func (cmd *MultiChannelCapabilityReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.EndPoint = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Dynamic = true
	} else {
		cmd.Properties1.Dynamic = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GenericDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SpecificDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClass = payload[i:]

	return nil
}

func (cmd *MultiChannelCapabilityReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.EndPoint) & byte(0x7F)

		if cmd.Properties1.Dynamic {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.GenericDeviceClass)

	payload = append(payload, cmd.SpecificDeviceClass)

	payload = append(payload, cmd.CommandClass...)

	return
}
