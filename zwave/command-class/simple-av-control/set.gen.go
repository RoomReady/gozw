// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package simpleavcontrol

import (
	"encoding/binary"
	"errors"
)

// <no value>

type SimpleAvControlSet struct {
	SequenceNumber byte

	Properties1 struct {
		KeyAttributes byte
	}

	ItemId uint16
}

func (cmd *SimpleAvControlSet) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SequenceNumber = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.KeyAttributes = (payload[i] & 0x07)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ItemId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *SimpleAvControlSet) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.SequenceNumber)

	{
		var val byte

		val |= (cmd.Properties1.KeyAttributes) & byte(0x07)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ItemId)
		payload = append(payload, buf...)
	}

	return
}
