// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package thermostatsetpointv3

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ThermostatSetpointCapabilitiesReport{})
}

// <no value>
type ThermostatSetpointCapabilitiesReport struct {
	Properties1 struct {
		SetpointType byte
	}

	Properties2 struct {
		Size byte

		Scale byte

		Precision byte
	}

	MinValue []byte

	Properties3 struct {
		Size byte

		Scale byte

		Precision byte
	}

	Maxvalue []byte
}

func (cmd *ThermostatSetpointCapabilitiesReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.SetpointType = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.Size = (payload[i] & 0x07)

	cmd.Properties2.Scale = (payload[i] & 0x18) >> 3

	cmd.Properties2.Precision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinValue = payload[i : i+1]
	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.Size = (payload[i] & 0x07)

	cmd.Properties3.Scale = (payload[i] & 0x18) >> 3

	cmd.Properties3.Precision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Maxvalue = payload[i : i+3]
	i += 3

	return nil
}

func (cmd *ThermostatSetpointCapabilitiesReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.SetpointType) & byte(0x0F)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.Size) & byte(0x07)

		val |= (cmd.Properties2.Scale << byte(3)) & byte(0x18)

		val |= (cmd.Properties2.Precision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.MinValue != nil && len(cmd.MinValue) > 0 {
		payload = append(payload, cmd.MinValue...)
	}

	{
		var val byte

		val |= (cmd.Properties3.Size) & byte(0x07)

		val |= (cmd.Properties3.Scale << byte(3)) & byte(0x18)

		val |= (cmd.Properties3.Precision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.Maxvalue != nil && len(cmd.Maxvalue) > 0 {
		payload = append(payload, cmd.Maxvalue...)
	}

	return
}
