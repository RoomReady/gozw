// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package commandclass

import (
	"errors"
	"fmt"

	"github.com/helioslabs/gozw/zwave/command-class/alarm"
	"github.com/helioslabs/gozw/zwave/command-class/alarm-v2"
	"github.com/helioslabs/gozw/zwave/command-class/application-status"
	"github.com/helioslabs/gozw/zwave/command-class/association"
	"github.com/helioslabs/gozw/zwave/command-class/association-v2"
	"github.com/helioslabs/gozw/zwave/command-class/basic"
	"github.com/helioslabs/gozw/zwave/command-class/battery"
	"github.com/helioslabs/gozw/zwave/command-class/clock"
	"github.com/helioslabs/gozw/zwave/command-class/color-control"
	"github.com/helioslabs/gozw/zwave/command-class/color-control-v2"
	"github.com/helioslabs/gozw/zwave/command-class/configuration"
	"github.com/helioslabs/gozw/zwave/command-class/configuration-v2"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock-logging"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock-v2"
	"github.com/helioslabs/gozw/zwave/command-class/manufacturer-specific"
	"github.com/helioslabs/gozw/zwave/command-class/manufacturer-specific-v2"
	"github.com/helioslabs/gozw/zwave/command-class/node-naming"
	"github.com/helioslabs/gozw/zwave/command-class/notification-v3"
	"github.com/helioslabs/gozw/zwave/command-class/notification-v4"
	"github.com/helioslabs/gozw/zwave/command-class/security"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-configuration"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v2"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v3"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v4"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v5"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v6"
	"github.com/helioslabs/gozw/zwave/command-class/switch-all"
	"github.com/helioslabs/gozw/zwave/command-class/switch-binary"
	"github.com/helioslabs/gozw/zwave/command-class/switch-toggle-binary"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v3"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v4"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-state"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode-v3"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-operating-state"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-operating-state-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint-v3"
	"github.com/helioslabs/gozw/zwave/command-class/time"
	"github.com/helioslabs/gozw/zwave/command-class/time-v2"
	"github.com/helioslabs/gozw/zwave/command-class/user-code"
	"github.com/helioslabs/gozw/zwave/command-class/version"
	"github.com/helioslabs/gozw/zwave/command-class/version-v2"
	"github.com/helioslabs/gozw/zwave/command-class/wake-up"
	"github.com/helioslabs/gozw/zwave/command-class/wake-up-v2"
)

type ID byte

const (
	Alarm                           ID = 0x71
	AlarmV2                         ID = 0x71
	NotificationV3                  ID = 0x71
	NotificationV4                  ID = 0x71
	ApplicationStatus               ID = 0x22
	AssociationCommandConfiguration ID = 0x9B
	Association                     ID = 0x85
	AssociationV2                   ID = 0x85
	AvContentDirectoryMd            ID = 0x95
	AvContentSearchMd               ID = 0x97
	AvRendererStatus                ID = 0x96
	AvTaggingMd                     ID = 0x99
	BasicTariffInfo                 ID = 0x36
	BasicWindowCovering             ID = 0x50
	Basic                           ID = 0x20
	Battery                         ID = 0x80
	ChimneyFan                      ID = 0x2A
	ClimateControlSchedule          ID = 0x46
	Clock                           ID = 0x81
	Configuration                   ID = 0x70
	ConfigurationV2                 ID = 0x70
	ControllerReplication           ID = 0x21
	Crc16Encap                      ID = 0x56
	DcpConfig                       ID = 0x3A
	DcpMonitor                      ID = 0x3B
	DoorLockLogging                 ID = 0x4C
	DoorLock                        ID = 0x62
	DoorLockV2                      ID = 0x62
	EnergyProduction                ID = 0x90
	FirmwareUpdateMd                ID = 0x7A
	FirmwareUpdateMdV2              ID = 0x7A
	FirmwareUpdateMdV3              ID = 0x7A
	GeographicLocation              ID = 0x8C
	GroupingName                    ID = 0x7B
	Hail                            ID = 0x82
	HrvControl                      ID = 0x39
	HrvStatus                       ID = 0x37
	Indicator                       ID = 0x87
	IpConfiguration                 ID = 0x9A
	Language                        ID = 0x89
	Lock                            ID = 0x76
	ManufacturerProprietary         ID = 0x91
	ManufacturerSpecific            ID = 0x72
	ManufacturerSpecificV2          ID = 0x72
	Mark                            ID = 0xEF
	MeterPulse                      ID = 0x35
	MeterTblConfig                  ID = 0x3C
	MeterTblMonitor                 ID = 0x3D
	MeterTblMonitorV2               ID = 0x3D
	MeterTblPush                    ID = 0x3E
	Meter                           ID = 0x32
	MeterV2                         ID = 0x32
	MeterV3                         ID = 0x32
	MeterV4                         ID = 0x32
	MtpWindowCovering               ID = 0x51
	MultiChannelAssociationV2       ID = 0x8E
	MultiChannelV2                  ID = 0x60
	MultiChannelV3                  ID = 0x60
	MultiCmd                        ID = 0x8F
	MultiInstanceAssociation        ID = 0x8E
	MultiInstance                   ID = 0x60
	NetworkManagementProxy          ID = 0x52
	NetworkManagementBasic          ID = 0x4D
	NetworkManagementInclusion      ID = 0x34
	NoOperation                     ID = 0x00
	NodeNaming                      ID = 0x77
	NonInteroperable                ID = 0xF0
	Powerlevel                      ID = 0x73
	PrepaymentEncapsulation         ID = 0x41
	Prepayment                      ID = 0x3F
	Proprietary                     ID = 0x88
	Protection                      ID = 0x75
	ProtectionV2                    ID = 0x75
	RateTblConfig                   ID = 0x48
	RateTblMonitor                  ID = 0x49
	RemoteAssociationActivate       ID = 0x7C
	RemoteAssociation               ID = 0x7D
	SceneActivation                 ID = 0x2B
	SceneActuatorConf               ID = 0x2C
	SceneControllerConf             ID = 0x2D
	ScheduleEntryLock               ID = 0x4E
	ScheduleEntryLockV2             ID = 0x4E
	ScheduleEntryLockV3             ID = 0x4E
	ScreenAttributes                ID = 0x93
	ScreenAttributesV2              ID = 0x93
	ScreenMd                        ID = 0x92
	ScreenMdV2                      ID = 0x92
	SecurityPanelMode               ID = 0x24
	SecurityPanelZoneSensor         ID = 0x2F
	SecurityPanelZone               ID = 0x2E
	Security                        ID = 0x98
	SensorAlarm                     ID = 0x9C
	SensorBinary                    ID = 0x30
	SensorBinaryV2                  ID = 0x30
	SensorConfiguration             ID = 0x9E
	SensorMultilevel                ID = 0x31
	SensorMultilevelV2              ID = 0x31
	SensorMultilevelV3              ID = 0x31
	SensorMultilevelV4              ID = 0x31
	SensorMultilevelV5              ID = 0x31
	SensorMultilevelV6              ID = 0x31
	SilenceAlarm                    ID = 0x9D
	SimpleAvControl                 ID = 0x94
	SwitchAll                       ID = 0x27
	SwitchBinary                    ID = 0x25
	SwitchMultilevel                ID = 0x26
	SwitchMultilevelV2              ID = 0x26
	SwitchMultilevelV3              ID = 0x26
	SwitchToggleBinary              ID = 0x28
	SwitchToggleMultilevel          ID = 0x29
	TariffConfig                    ID = 0x4A
	TariffTblMonitor                ID = 0x4B
	ThermostatFanMode               ID = 0x44
	ThermostatFanModeV2             ID = 0x44
	ThermostatFanModeV3             ID = 0x44
	ThermostatFanModeV4             ID = 0x44
	ThermostatFanState              ID = 0x45
	ThermostatHeating               ID = 0x38
	ThermostatMode                  ID = 0x40
	ThermostatModeV2                ID = 0x40
	ThermostatModeV3                ID = 0x40
	ThermostatOperatingState        ID = 0x42
	ThermostatOperatingStateV2      ID = 0x42
	ThermostatSetback               ID = 0x47
	ThermostatSetpoint              ID = 0x43
	ThermostatSetpointV2            ID = 0x43
	ThermostatSetpointV3            ID = 0x43
	TimeParameters                  ID = 0x8B
	Time                            ID = 0x8A
	TimeV2                          ID = 0x8A
	TransportService                ID = 0x55
	TransportServiceV2              ID = 0x55
	UserCode                        ID = 0x63
	Version                         ID = 0x86
	VersionV2                       ID = 0x86
	WakeUp                          ID = 0x84
	WakeUpV2                        ID = 0x84
	ZensorNet                       ID = 0x02
	Zip6lowpan                      ID = 0x4F
	Zip                             ID = 0x23
	ZipV2                           ID = 0x23
	ZwaveCmdClass                   ID = 0x01
	ApplicationCapability           ID = 0x57
	ColorControl                    ID = 0x33
	ColorControlV2                  ID = 0x33
	Schedule                        ID = 0x53
	NetworkManagementPrimary        ID = 0x54
	ZipNd                           ID = 0x58
	AssociationGroupInfo            ID = 0x59
	DeviceResetLocally              ID = 0x5A
	CentralScene                    ID = 0x5B
	IpAssociation                   ID = 0x5C
	Antitheft                       ID = 0x5D
	AntitheftV2                     ID = 0x5D
	ZwaveplusInfo                   ID = 0x5E
	ZwaveplusInfoV2                 ID = 0x5E
	ZipGateway                      ID = 0x5F
	ZipPortal                       ID = 0x61
	Appliance                       ID = 0x64
	Dmx                             ID = 0x65
	BarrierOperator                 ID = 0x66
)

func (c ID) String() string {
	switch c {

	case Alarm:
		return "Command Class Alarm"

	case ApplicationStatus:
		return "Command Class Application Status"

	case AssociationCommandConfiguration:
		return "Command Class Association Command Configuration"

	case Association:
		return "Command Class Association"

	case AvContentDirectoryMd:
		return "Command Class Av Content Directory Md"

	case AvContentSearchMd:
		return "Command Class Av Content Search Md"

	case AvRendererStatus:
		return "Command Class Av Renderer Status"

	case AvTaggingMd:
		return "Command Class Av Tagging Md"

	case BasicTariffInfo:
		return "Command Class Basic Tariff Info"

	case BasicWindowCovering:
		return "Command Class Basic Window Covering"

	case Basic:
		return "Command Class Basic"

	case Battery:
		return "Command Class Battery"

	case ChimneyFan:
		return "Command Class Chimney Fan"

	case ClimateControlSchedule:
		return "Command Class Climate Control Schedule"

	case Clock:
		return "Command Class Clock"

	case Configuration:
		return "Command Class Configuration"

	case ControllerReplication:
		return "Command Class Controller Replication"

	case Crc16Encap:
		return "Command Class CRC16 Encap"

	case DcpConfig:
		return "Command Class Dcp Config"

	case DcpMonitor:
		return "Command Class Dcp Monitor"

	case DoorLockLogging:
		return "Command Class Door Lock Logging"

	case DoorLock:
		return "Command Class Door Lock"

	case EnergyProduction:
		return "Command Class Energy Production"

	case FirmwareUpdateMd:
		return "Command Class Firmware Update Md"

	case GeographicLocation:
		return "Command Class Geographic Location"

	case GroupingName:
		return "Command Class Grouping Name"

	case Hail:
		return "Command Class Hail"

	case HrvControl:
		return "Command Class Hrv Control"

	case HrvStatus:
		return "Command Class Hrv Status"

	case Indicator:
		return "Command Class Indicator"

	case IpConfiguration:
		return "Command Class Ip Configuration"

	case Language:
		return "Command Class Language"

	case Lock:
		return "Command Class Lock"

	case ManufacturerProprietary:
		return "Command Class Manufacturer Proprietary"

	case ManufacturerSpecific:
		return "Command Class Manufacturer Specific"

	case Mark:
		return "Command Class Mark"

	case MeterPulse:
		return "Command Class Meter Pulse"

	case MeterTblConfig:
		return "Command Class Meter Tbl Config"

	case MeterTblMonitor:
		return "Command Class Meter Tbl Monitor"

	case MeterTblPush:
		return "Command Class Meter Tbl Push"

	case Meter:
		return "Command Class Meter"

	case MtpWindowCovering:
		return "Command Class Mtp Window Covering"

	case MultiCmd:
		return "Command Class Multi Cmd"

	case MultiInstanceAssociation:
		return "Command Class Multi Instance Association"

	case MultiInstance:
		return "Command Class Multi Instance"

	case NetworkManagementProxy:
		return "Command Class Network Management Proxy"

	case NetworkManagementBasic:
		return "Command Class Network Management Basic"

	case NetworkManagementInclusion:
		return "Command Class Network Management Inclusion"

	case NoOperation:
		return "NOP"

	case NodeNaming:
		return "Command Class Node Naming"

	case NonInteroperable:
		return "Command Class Non Interoperable"

	case Powerlevel:
		return "Command Class Powerlevel"

	case PrepaymentEncapsulation:
		return "Command Class Prepayment Encapsulation"

	case Prepayment:
		return "Command Class Prepayment"

	case Proprietary:
		return "Command Class Proprietary"

	case Protection:
		return "Command Class Protection"

	case RateTblConfig:
		return "Command Class Rate Tbl Config"

	case RateTblMonitor:
		return "Command Class Rate Tbl Monitor"

	case RemoteAssociationActivate:
		return "Command Class Remote Association Activate"

	case RemoteAssociation:
		return "Command Class Remote Association"

	case SceneActivation:
		return "Command Class Scene Activation"

	case SceneActuatorConf:
		return "Command Class Scene Actuator Conf"

	case SceneControllerConf:
		return "Command Class Scene Controller Conf"

	case ScheduleEntryLock:
		return "Command Class Schedule Entry Lock"

	case ScreenAttributes:
		return "Command Class Screen Attributes"

	case ScreenMd:
		return "Command Class Screen Md"

	case SecurityPanelMode:
		return "Command Class Security Panel Mode"

	case SecurityPanelZoneSensor:
		return "Command Class Security Panel Zone Sensor"

	case SecurityPanelZone:
		return "Command Class Security Panel Zone"

	case Security:
		return "Command Class Security"

	case SensorAlarm:
		return "Command Class Sensor Alarm"

	case SensorBinary:
		return "Command Class Sensor Binary"

	case SensorConfiguration:
		return "Command Class Sensor Configuration"

	case SensorMultilevel:
		return "Command Class Sensor Multilevel"

	case SilenceAlarm:
		return "Command Class Silence Alarm"

	case SimpleAvControl:
		return "Command Class Simple Av Control"

	case SwitchAll:
		return "Command Class Switch All"

	case SwitchBinary:
		return "Command Class Switch Binary"

	case SwitchMultilevel:
		return "Command Class Switch Multilevel"

	case SwitchToggleBinary:
		return "Command Class Switch Toggle Binary"

	case SwitchToggleMultilevel:
		return "Command Class Switch Toggle Multilevel"

	case TariffConfig:
		return "Command Class Tariff Config"

	case TariffTblMonitor:
		return "Command Class Tariff Tbl Monitor"

	case ThermostatFanMode:
		return "Command Class Thermostat Fan Mode"

	case ThermostatFanState:
		return "Command Class Thermostat Fan State"

	case ThermostatHeating:
		return "Command Class Thermostat Heating"

	case ThermostatMode:
		return "Command Class Thermostat Mode"

	case ThermostatOperatingState:
		return "Command Class Thermostat Operating State"

	case ThermostatSetback:
		return "Command Class Thermostat Setback"

	case ThermostatSetpoint:
		return "Command Class Thermostat Setpoint"

	case TimeParameters:
		return "Command Class Time Parameters"

	case Time:
		return "Command Class Time"

	case TransportService:
		return "Command Class Transport Service"

	case UserCode:
		return "Command Class User Code"

	case Version:
		return "Command Class Version"

	case WakeUp:
		return "Command Class Wake Up"

	case ZensorNet:
		return "Command Class Zensor Net"

	case Zip6lowpan:
		return "Command Class Z/IP 6lowpan"

	case Zip:
		return "Command Class Z/IP"

	case ZwaveCmdClass:
		return "Z-Wave protocol Command Class"

	case ApplicationCapability:
		return "Command Class Application Capability"

	case ColorControl:
		return "Command Class Color Control"

	case Schedule:
		return "Command Class Schedule"

	case NetworkManagementPrimary:
		return "Command Class Network Management Primary"

	case ZipNd:
		return "Command Class Z/IP-ND"

	case AssociationGroupInfo:
		return "Command Class Association Group Info"

	case DeviceResetLocally:
		return "Command Class Device Reset Locally"

	case CentralScene:
		return "Command Class Central Scene"

	case IpAssociation:
		return "Command Class Ip Association"

	case Antitheft:
		return "Command Class Anti-theft"

	case ZwaveplusInfo:
		return "Command Class Z-Wave+ Info"

	case ZipGateway:
		return "Command Class Z/IP Gateway"

	case ZipPortal:
		return "Command Class Z/IP Portal"

	case Appliance:
		return "Command Class Appliance"

	case Dmx:
		return "Command Class DMX"

	case BarrierOperator:
		return "Command Class Barrier Operator"

	default:
		return fmt.Sprintf("Unknown (0x%X)", byte(c))
	}
}

func Parse(ccVersion uint8, payload []byte) (Command, error) {
	switch {

	case payload[0] == byte(Alarm) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := alarm.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := alarm.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Alarm")
		}

	case payload[0] == byte(AlarmV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := alarmv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := alarmv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := alarmv2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := alarmv2.TypeSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := alarmv2.TypeSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Alarm")
		}

	case payload[0] == byte(NotificationV3) && ccVersion == 3:
		switch payload[1] {
		case 0x04:
			command := notificationv3.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := notificationv3.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := notificationv3.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := notificationv3.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := notificationv3.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := notificationv3.EventSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := notificationv3.EventSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Notification")
		}

	case payload[0] == byte(NotificationV4) && ccVersion == 4:
		switch payload[1] {
		case 0x04:
			command := notificationv4.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := notificationv4.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := notificationv4.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := notificationv4.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := notificationv4.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := notificationv4.EventSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := notificationv4.EventSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Notification")
		}

	case payload[0] == byte(ApplicationStatus) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := applicationstatus.ApplicationBusy{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := applicationstatus.ApplicationRejectedRequest{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Application Status")
		}

	case payload[0] == byte(Association) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := association.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := association.GroupingsGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := association.GroupingsReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := association.Remove{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := association.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := association.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association")
		}

	case payload[0] == byte(AssociationV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := associationv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := associationv2.GroupingsGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := associationv2.GroupingsReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := associationv2.Remove{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := associationv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := associationv2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x0B:
			command := associationv2.SpecificGroupGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x0C:
			command := associationv2.SpecificGroupReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association")
		}

	case payload[0] == byte(Basic) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := basic.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := basic.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := basic.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Basic")
		}

	case payload[0] == byte(Battery) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := battery.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := battery.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Battery")
		}

	case payload[0] == byte(Clock) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := clock.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := clock.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := clock.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Clock")
		}

	case payload[0] == byte(Configuration) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := configuration.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := configuration.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := configuration.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Configuration")
		}

	case payload[0] == byte(ConfigurationV2) && ccVersion == 2:
		switch payload[1] {
		case 0x08:
			command := configurationv2.BulkGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x09:
			command := configurationv2.BulkReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := configurationv2.BulkSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := configurationv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := configurationv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := configurationv2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Configuration")
		}

	case payload[0] == byte(DoorLockLogging) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := doorlocklogging.RecordsSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := doorlocklogging.RecordsSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := doorlocklogging.RecordGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := doorlocklogging.RecordReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock Logging")
		}

	case payload[0] == byte(DoorLock) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := doorlock.ConfigurationGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := doorlock.ConfigurationReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := doorlock.ConfigurationSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := doorlock.OperationGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := doorlock.OperationReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := doorlock.OperationSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock")
		}

	case payload[0] == byte(DoorLockV2) && ccVersion == 2:
		switch payload[1] {
		case 0x05:
			command := doorlockv2.ConfigurationGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := doorlockv2.ConfigurationReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := doorlockv2.ConfigurationSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := doorlockv2.OperationGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := doorlockv2.OperationReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := doorlockv2.OperationSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock")
		}

	case payload[0] == byte(ManufacturerSpecific) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := manufacturerspecific.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := manufacturerspecific.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Manufacturer Specific")
		}

	case payload[0] == byte(ManufacturerSpecificV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := manufacturerspecificv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := manufacturerspecificv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := manufacturerspecificv2.DeviceSpecificGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := manufacturerspecificv2.DeviceSpecificReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Manufacturer Specific")
		}

	case payload[0] == byte(NodeNaming) && ccVersion == 1:
		switch payload[1] {
		case 0x06:
			command := nodenaming.NodeLocationReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := nodenaming.NodeLocationSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := nodenaming.NodeLocationGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := nodenaming.NodeNameGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := nodenaming.NodeNameReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := nodenaming.NodeNameSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Node Naming")
		}

	case payload[0] == byte(Security) && ccVersion == 1:
		switch payload[1] {
		case 0x06:
			command := security.NetworkKeySet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := security.NetworkKeyVerify{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := security.CommandsSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := security.CommandsSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x81:
			command := security.MessageEncapsulation{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0xC1:
			command := security.MessageEncapsulationNonceGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x40:
			command := security.NonceGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x80:
			command := security.NonceReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := security.SchemeGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := security.SchemeInherit{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := security.SchemeReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Security")
		}

	case payload[0] == byte(SensorConfiguration) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := sensorconfiguration.SensorTriggerLevelGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := sensorconfiguration.SensorTriggerLevelReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := sensorconfiguration.SensorTriggerLevelSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Configuration")
		}

	case payload[0] == byte(SensorMultilevel) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := sensormultilevel.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevel.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevelv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV3) && ccVersion == 3:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv3.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevelv3.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV4) && ccVersion == 4:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv4.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevelv4.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV5) && ccVersion == 5:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv5.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevelv5.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := sensormultilevelv5.SupportedGetSensor{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := sensormultilevelv5.SupportedSensorReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := sensormultilevelv5.SupportedGetScale{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := sensormultilevelv5.SupportedScaleReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV6) && ccVersion == 6:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv6.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := sensormultilevelv6.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := sensormultilevelv6.SupportedGetSensor{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := sensormultilevelv6.SupportedSensorReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := sensormultilevelv6.SupportedGetScale{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := sensormultilevelv6.SupportedScaleReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SwitchAll) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := switchall.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := switchall.Off{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := switchall.On{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := switchall.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := switchall.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch All")
		}

	case payload[0] == byte(SwitchBinary) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := switchbinary.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := switchbinary.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := switchbinary.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Binary")
		}

	case payload[0] == byte(SwitchToggleBinary) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := switchtogglebinary.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := switchtogglebinary.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := switchtogglebinary.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Toggle Binary")
		}

	case payload[0] == byte(ThermostatFanMode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmode.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatfanmode.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatfanmode.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatfanmode.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatfanmode.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatfanmodev2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatfanmodev2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatfanmodev2.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatfanmodev2.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev3.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatfanmodev3.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatfanmodev3.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatfanmodev3.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatfanmodev3.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV4) && ccVersion == 4:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev4.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatfanmodev4.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatfanmodev4.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatfanmodev4.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatfanmodev4.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanState) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatfanstate.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatfanstate.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan State")
		}

	case payload[0] == byte(ThermostatMode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatmode.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatmode.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatmode.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatmode.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatmode.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatModeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatmodev2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatmodev2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatmodev2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatmodev2.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatmodev2.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatModeV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatmodev3.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatmodev3.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatmodev3.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatmodev3.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatmodev3.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatOperatingState) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatoperatingstate.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatoperatingstate.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Operating State")
		}

	case payload[0] == byte(ThermostatOperatingStateV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatoperatingstatev2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatoperatingstatev2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatoperatingstatev2.LoggingSupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatoperatingstatev2.ThermostatOperatingLoggingSupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatoperatingstatev2.LoggingGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := thermostatoperatingstatev2.LoggingReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Operating State")
		}

	case payload[0] == byte(ThermostatSetpoint) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpoint.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatsetpoint.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatsetpoint.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatsetpoint.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatsetpoint.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(ThermostatSetpointV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpointv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatsetpointv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatsetpointv2.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatsetpointv2.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatsetpointv2.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(ThermostatSetpointV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpointv3.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := thermostatsetpointv3.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := thermostatsetpointv3.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := thermostatsetpointv3.SupportedGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := thermostatsetpointv3.SupportedReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x09:
			command := thermostatsetpointv3.CapabilitiesGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x0A:
			command := thermostatsetpointv3.CapabilitiesReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(Time) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := time.DateGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := time.DateReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := time.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := time.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Time")
		}

	case payload[0] == byte(TimeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x03:
			command := timev2.DateGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := timev2.DateReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := timev2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := timev2.OffsetGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := timev2.OffsetReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := timev2.OffsetSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := timev2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Time")
		}

	case payload[0] == byte(UserCode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := usercode.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := usercode.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x01:
			command := usercode.Set{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := usercode.UsersNumberGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := usercode.UsersNumberReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class User Code")
		}

	case payload[0] == byte(Version) && ccVersion == 1:
		switch payload[1] {
		case 0x13:
			command := version.CommandClassGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x14:
			command := version.CommandClassReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x11:
			command := version.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x12:
			command := version.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Version")
		}

	case payload[0] == byte(VersionV2) && ccVersion == 2:
		switch payload[1] {
		case 0x13:
			command := versionv2.CommandClassGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x14:
			command := versionv2.CommandClassReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x11:
			command := versionv2.Get{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x12:
			command := versionv2.Report{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Version")
		}

	case payload[0] == byte(WakeUp) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := wakeup.IntervalGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := wakeup.IntervalReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := wakeup.IntervalSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := wakeup.NoMoreInformation{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := wakeup.Notification{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Wake Up")
		}

	case payload[0] == byte(WakeUpV2) && ccVersion == 2:
		switch payload[1] {
		case 0x09:
			command := wakeupv2.IntervalCapabilitiesGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x0A:
			command := wakeupv2.IntervalCapabilitiesReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := wakeupv2.IntervalGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := wakeupv2.IntervalReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := wakeupv2.IntervalSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x08:
			command := wakeupv2.NoMoreInformation{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := wakeupv2.Notification{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Wake Up")
		}

	case payload[0] == byte(ColorControl) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := colorcontrol.CapabilityGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := colorcontrol.CapabilityReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := colorcontrol.StateGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := colorcontrol.StateReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := colorcontrol.StateSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := colorcontrol.StartCapabilityLevelChange{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := colorcontrol.StopStateChange{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Color Control")
		}

	case payload[0] == byte(ColorControlV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := colorcontrolv2.CapabilityGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x02:
			command := colorcontrolv2.CapabilityReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x03:
			command := colorcontrolv2.StateGet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x04:
			command := colorcontrolv2.StateReport{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x05:
			command := colorcontrolv2.StateSet{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x06:
			command := colorcontrolv2.StartCapabilityLevelChange{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		case 0x07:
			command := colorcontrolv2.StopStateChange{}
			if err := command.UnmarshalBinary(payload); err != nil {
				return nil, err
			}
			return &command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Color Control")
		}

	default:
		return nil, errors.New("Unknown command class")
	}
}
