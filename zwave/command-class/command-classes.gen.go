// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package commandclass

import (
	"errors"
	"fmt"

	"github.com/helioslabs/gozw/zwave/command-class/alarm"
	"github.com/helioslabs/gozw/zwave/command-class/alarm-v2"
	"github.com/helioslabs/gozw/zwave/command-class/antitheft"
	"github.com/helioslabs/gozw/zwave/command-class/antitheft-v2"
	"github.com/helioslabs/gozw/zwave/command-class/appliance"
	"github.com/helioslabs/gozw/zwave/command-class/application-capability"
	"github.com/helioslabs/gozw/zwave/command-class/application-status"
	"github.com/helioslabs/gozw/zwave/command-class/association"
	"github.com/helioslabs/gozw/zwave/command-class/association-command-configuration"
	"github.com/helioslabs/gozw/zwave/command-class/association-grp-info"
	"github.com/helioslabs/gozw/zwave/command-class/association-v2"
	"github.com/helioslabs/gozw/zwave/command-class/av-content-directory-md"
	"github.com/helioslabs/gozw/zwave/command-class/av-content-search-md"
	"github.com/helioslabs/gozw/zwave/command-class/av-renderer-status"
	"github.com/helioslabs/gozw/zwave/command-class/av-tagging-md"
	"github.com/helioslabs/gozw/zwave/command-class/barrier-operator"
	"github.com/helioslabs/gozw/zwave/command-class/basic"
	"github.com/helioslabs/gozw/zwave/command-class/basic-tariff-info"
	"github.com/helioslabs/gozw/zwave/command-class/basic-window-covering"
	"github.com/helioslabs/gozw/zwave/command-class/battery"
	"github.com/helioslabs/gozw/zwave/command-class/central-scene"
	"github.com/helioslabs/gozw/zwave/command-class/chimney-fan"
	"github.com/helioslabs/gozw/zwave/command-class/climate-control-schedule"
	"github.com/helioslabs/gozw/zwave/command-class/clock"
	"github.com/helioslabs/gozw/zwave/command-class/color-control"
	"github.com/helioslabs/gozw/zwave/command-class/color-control-v2"
	"github.com/helioslabs/gozw/zwave/command-class/configuration"
	"github.com/helioslabs/gozw/zwave/command-class/configuration-v2"
	"github.com/helioslabs/gozw/zwave/command-class/dcp-config"
	"github.com/helioslabs/gozw/zwave/command-class/dcp-monitor"
	"github.com/helioslabs/gozw/zwave/command-class/device-reset-locally"
	"github.com/helioslabs/gozw/zwave/command-class/dmx"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock-logging"
	"github.com/helioslabs/gozw/zwave/command-class/door-lock-v2"
	"github.com/helioslabs/gozw/zwave/command-class/energy-production"
	"github.com/helioslabs/gozw/zwave/command-class/firmware-update-md"
	"github.com/helioslabs/gozw/zwave/command-class/firmware-update-md-v2"
	"github.com/helioslabs/gozw/zwave/command-class/firmware-update-md-v3"
	"github.com/helioslabs/gozw/zwave/command-class/geographic-location"
	"github.com/helioslabs/gozw/zwave/command-class/grouping-name"
	"github.com/helioslabs/gozw/zwave/command-class/hail"
	"github.com/helioslabs/gozw/zwave/command-class/hrv-control"
	"github.com/helioslabs/gozw/zwave/command-class/hrv-status"
	"github.com/helioslabs/gozw/zwave/command-class/indicator"
	"github.com/helioslabs/gozw/zwave/command-class/language"
	"github.com/helioslabs/gozw/zwave/command-class/lock"
	"github.com/helioslabs/gozw/zwave/command-class/manufacturer-specific"
	"github.com/helioslabs/gozw/zwave/command-class/manufacturer-specific-v2"
	"github.com/helioslabs/gozw/zwave/command-class/meter"
	"github.com/helioslabs/gozw/zwave/command-class/meter-pulse"
	"github.com/helioslabs/gozw/zwave/command-class/meter-tbl-config"
	"github.com/helioslabs/gozw/zwave/command-class/meter-tbl-monitor"
	"github.com/helioslabs/gozw/zwave/command-class/meter-tbl-monitor-v2"
	"github.com/helioslabs/gozw/zwave/command-class/meter-tbl-push"
	"github.com/helioslabs/gozw/zwave/command-class/meter-v2"
	"github.com/helioslabs/gozw/zwave/command-class/meter-v3"
	"github.com/helioslabs/gozw/zwave/command-class/meter-v4"
	"github.com/helioslabs/gozw/zwave/command-class/mtp-window-covering"
	"github.com/helioslabs/gozw/zwave/command-class/multi-channel-association-v2"
	"github.com/helioslabs/gozw/zwave/command-class/multi-channel-v2"
	"github.com/helioslabs/gozw/zwave/command-class/multi-channel-v3"
	"github.com/helioslabs/gozw/zwave/command-class/multi-cmd"
	"github.com/helioslabs/gozw/zwave/command-class/multi-instance"
	"github.com/helioslabs/gozw/zwave/command-class/multi-instance-association"
	"github.com/helioslabs/gozw/zwave/command-class/network-management-basic"
	"github.com/helioslabs/gozw/zwave/command-class/network-management-inclusion"
	"github.com/helioslabs/gozw/zwave/command-class/network-management-primary"
	"github.com/helioslabs/gozw/zwave/command-class/network-management-proxy"
	"github.com/helioslabs/gozw/zwave/command-class/node-naming"
	"github.com/helioslabs/gozw/zwave/command-class/notification-v3"
	"github.com/helioslabs/gozw/zwave/command-class/notification-v4"
	"github.com/helioslabs/gozw/zwave/command-class/powerlevel"
	"github.com/helioslabs/gozw/zwave/command-class/prepayment"
	"github.com/helioslabs/gozw/zwave/command-class/prepayment-encapsulation"
	"github.com/helioslabs/gozw/zwave/command-class/proprietary"
	"github.com/helioslabs/gozw/zwave/command-class/protection"
	"github.com/helioslabs/gozw/zwave/command-class/protection-v2"
	"github.com/helioslabs/gozw/zwave/command-class/rate-tbl-config"
	"github.com/helioslabs/gozw/zwave/command-class/rate-tbl-monitor"
	"github.com/helioslabs/gozw/zwave/command-class/remote-association"
	"github.com/helioslabs/gozw/zwave/command-class/remote-association-activate"
	"github.com/helioslabs/gozw/zwave/command-class/scene-activation"
	"github.com/helioslabs/gozw/zwave/command-class/scene-actuator-conf"
	"github.com/helioslabs/gozw/zwave/command-class/scene-controller-conf"
	"github.com/helioslabs/gozw/zwave/command-class/schedule"
	"github.com/helioslabs/gozw/zwave/command-class/schedule-entry-lock"
	"github.com/helioslabs/gozw/zwave/command-class/schedule-entry-lock-v2"
	"github.com/helioslabs/gozw/zwave/command-class/schedule-entry-lock-v3"
	"github.com/helioslabs/gozw/zwave/command-class/screen-attributes"
	"github.com/helioslabs/gozw/zwave/command-class/screen-attributes-v2"
	"github.com/helioslabs/gozw/zwave/command-class/screen-md"
	"github.com/helioslabs/gozw/zwave/command-class/screen-md-v2"
	"github.com/helioslabs/gozw/zwave/command-class/security"
	"github.com/helioslabs/gozw/zwave/command-class/security-panel-mode"
	"github.com/helioslabs/gozw/zwave/command-class/security-panel-zone"
	"github.com/helioslabs/gozw/zwave/command-class/security-panel-zone-sensor"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-alarm"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-binary"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-binary-v2"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-configuration"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v2"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v3"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v4"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v5"
	"github.com/helioslabs/gozw/zwave/command-class/sensor-multilevel-v6"
	"github.com/helioslabs/gozw/zwave/command-class/silence-alarm"
	"github.com/helioslabs/gozw/zwave/command-class/simple-av-control"
	"github.com/helioslabs/gozw/zwave/command-class/switch-all"
	"github.com/helioslabs/gozw/zwave/command-class/switch-binary"
	"github.com/helioslabs/gozw/zwave/command-class/switch-multilevel"
	"github.com/helioslabs/gozw/zwave/command-class/switch-multilevel-v2"
	"github.com/helioslabs/gozw/zwave/command-class/switch-multilevel-v3"
	"github.com/helioslabs/gozw/zwave/command-class/switch-toggle-binary"
	"github.com/helioslabs/gozw/zwave/command-class/switch-toggle-multilevel"
	"github.com/helioslabs/gozw/zwave/command-class/tariff-config"
	"github.com/helioslabs/gozw/zwave/command-class/tariff-tbl-monitor"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v3"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-mode-v4"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-fan-state"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-heating"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-mode-v3"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-operating-state"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-operating-state-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setback"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint-v2"
	"github.com/helioslabs/gozw/zwave/command-class/thermostat-setpoint-v3"
	"github.com/helioslabs/gozw/zwave/command-class/time"
	"github.com/helioslabs/gozw/zwave/command-class/time-parameters"
	"github.com/helioslabs/gozw/zwave/command-class/time-v2"
	"github.com/helioslabs/gozw/zwave/command-class/user-code"
	"github.com/helioslabs/gozw/zwave/command-class/version"
	"github.com/helioslabs/gozw/zwave/command-class/version-v2"
	"github.com/helioslabs/gozw/zwave/command-class/wake-up"
	"github.com/helioslabs/gozw/zwave/command-class/wake-up-v2"
	"github.com/helioslabs/gozw/zwave/command-class/zensor-net"
	"github.com/helioslabs/gozw/zwave/command-class/zwaveplus-info"
	"github.com/helioslabs/gozw/zwave/command-class/zwaveplus-info-v2"
)

type CommandClassID byte

const (
	Alarm                           CommandClassID = 0x71
	AlarmV2                         CommandClassID = 0x71
	NotificationV3                  CommandClassID = 0x71
	NotificationV4                  CommandClassID = 0x71
	ApplicationStatus               CommandClassID = 0x22
	AssociationCommandConfiguration CommandClassID = 0x9B
	Association                     CommandClassID = 0x85
	AssociationV2                   CommandClassID = 0x85
	AvContentDirectoryMd            CommandClassID = 0x95
	AvContentSearchMd               CommandClassID = 0x97
	AvRendererStatus                CommandClassID = 0x96
	AvTaggingMd                     CommandClassID = 0x99
	BasicTariffInfo                 CommandClassID = 0x36
	BasicWindowCovering             CommandClassID = 0x50
	Basic                           CommandClassID = 0x20
	Battery                         CommandClassID = 0x80
	ChimneyFan                      CommandClassID = 0x2A
	ClimateControlSchedule          CommandClassID = 0x46
	Clock                           CommandClassID = 0x81
	Configuration                   CommandClassID = 0x70
	ConfigurationV2                 CommandClassID = 0x70
	ControllerReplication           CommandClassID = 0x21
	Crc16Encap                      CommandClassID = 0x56
	DcpConfig                       CommandClassID = 0x3A
	DcpMonitor                      CommandClassID = 0x3B
	DoorLockLogging                 CommandClassID = 0x4C
	DoorLock                        CommandClassID = 0x62
	DoorLockV2                      CommandClassID = 0x62
	EnergyProduction                CommandClassID = 0x90
	FirmwareUpdateMd                CommandClassID = 0x7A
	FirmwareUpdateMdV2              CommandClassID = 0x7A
	FirmwareUpdateMdV3              CommandClassID = 0x7A
	GeographicLocation              CommandClassID = 0x8C
	GroupingName                    CommandClassID = 0x7B
	Hail                            CommandClassID = 0x82
	HrvControl                      CommandClassID = 0x39
	HrvStatus                       CommandClassID = 0x37
	Indicator                       CommandClassID = 0x87
	IpConfiguration                 CommandClassID = 0x9A
	Language                        CommandClassID = 0x89
	Lock                            CommandClassID = 0x76
	ManufacturerProprietary         CommandClassID = 0x91
	ManufacturerSpecific            CommandClassID = 0x72
	ManufacturerSpecificV2          CommandClassID = 0x72
	Mark                            CommandClassID = 0xEF
	MeterPulse                      CommandClassID = 0x35
	MeterTblConfig                  CommandClassID = 0x3C
	MeterTblMonitor                 CommandClassID = 0x3D
	MeterTblMonitorV2               CommandClassID = 0x3D
	MeterTblPush                    CommandClassID = 0x3E
	Meter                           CommandClassID = 0x32
	MeterV2                         CommandClassID = 0x32
	MeterV3                         CommandClassID = 0x32
	MeterV4                         CommandClassID = 0x32
	MtpWindowCovering               CommandClassID = 0x51
	MultiChannelAssociationV2       CommandClassID = 0x8E
	MultiChannelV2                  CommandClassID = 0x60
	MultiChannelV3                  CommandClassID = 0x60
	MultiCmd                        CommandClassID = 0x8F
	MultiInstanceAssociation        CommandClassID = 0x8E
	MultiInstance                   CommandClassID = 0x60
	NetworkManagementProxy          CommandClassID = 0x52
	NetworkManagementBasic          CommandClassID = 0x4D
	NetworkManagementInclusion      CommandClassID = 0x34
	NoOperation                     CommandClassID = 0x00
	NodeNaming                      CommandClassID = 0x77
	NonInteroperable                CommandClassID = 0xF0
	Powerlevel                      CommandClassID = 0x73
	PrepaymentEncapsulation         CommandClassID = 0x41
	Prepayment                      CommandClassID = 0x3F
	Proprietary                     CommandClassID = 0x88
	Protection                      CommandClassID = 0x75
	ProtectionV2                    CommandClassID = 0x75
	RateTblConfig                   CommandClassID = 0x48
	RateTblMonitor                  CommandClassID = 0x49
	RemoteAssociationActivate       CommandClassID = 0x7C
	RemoteAssociation               CommandClassID = 0x7D
	SceneActivation                 CommandClassID = 0x2B
	SceneActuatorConf               CommandClassID = 0x2C
	SceneControllerConf             CommandClassID = 0x2D
	ScheduleEntryLock               CommandClassID = 0x4E
	ScheduleEntryLockV2             CommandClassID = 0x4E
	ScheduleEntryLockV3             CommandClassID = 0x4E
	ScreenAttributes                CommandClassID = 0x93
	ScreenAttributesV2              CommandClassID = 0x93
	ScreenMd                        CommandClassID = 0x92
	ScreenMdV2                      CommandClassID = 0x92
	SecurityPanelMode               CommandClassID = 0x24
	SecurityPanelZoneSensor         CommandClassID = 0x2F
	SecurityPanelZone               CommandClassID = 0x2E
	Security                        CommandClassID = 0x98
	SensorAlarm                     CommandClassID = 0x9C
	SensorBinary                    CommandClassID = 0x30
	SensorBinaryV2                  CommandClassID = 0x30
	SensorConfiguration             CommandClassID = 0x9E
	SensorMultilevel                CommandClassID = 0x31
	SensorMultilevelV2              CommandClassID = 0x31
	SensorMultilevelV3              CommandClassID = 0x31
	SensorMultilevelV4              CommandClassID = 0x31
	SensorMultilevelV5              CommandClassID = 0x31
	SensorMultilevelV6              CommandClassID = 0x31
	SilenceAlarm                    CommandClassID = 0x9D
	SimpleAvControl                 CommandClassID = 0x94
	SwitchAll                       CommandClassID = 0x27
	SwitchBinary                    CommandClassID = 0x25
	SwitchMultilevel                CommandClassID = 0x26
	SwitchMultilevelV2              CommandClassID = 0x26
	SwitchMultilevelV3              CommandClassID = 0x26
	SwitchToggleBinary              CommandClassID = 0x28
	SwitchToggleMultilevel          CommandClassID = 0x29
	TariffConfig                    CommandClassID = 0x4A
	TariffTblMonitor                CommandClassID = 0x4B
	ThermostatFanMode               CommandClassID = 0x44
	ThermostatFanModeV2             CommandClassID = 0x44
	ThermostatFanModeV3             CommandClassID = 0x44
	ThermostatFanModeV4             CommandClassID = 0x44
	ThermostatFanState              CommandClassID = 0x45
	ThermostatHeating               CommandClassID = 0x38
	ThermostatMode                  CommandClassID = 0x40
	ThermostatModeV2                CommandClassID = 0x40
	ThermostatModeV3                CommandClassID = 0x40
	ThermostatOperatingState        CommandClassID = 0x42
	ThermostatOperatingStateV2      CommandClassID = 0x42
	ThermostatSetback               CommandClassID = 0x47
	ThermostatSetpoint              CommandClassID = 0x43
	ThermostatSetpointV2            CommandClassID = 0x43
	ThermostatSetpointV3            CommandClassID = 0x43
	TimeParameters                  CommandClassID = 0x8B
	Time                            CommandClassID = 0x8A
	TimeV2                          CommandClassID = 0x8A
	TransportService                CommandClassID = 0x55
	TransportServiceV2              CommandClassID = 0x55
	UserCode                        CommandClassID = 0x63
	Version                         CommandClassID = 0x86
	VersionV2                       CommandClassID = 0x86
	WakeUp                          CommandClassID = 0x84
	WakeUpV2                        CommandClassID = 0x84
	ZensorNet                       CommandClassID = 0x02
	Zip6lowpan                      CommandClassID = 0x4F
	Zip                             CommandClassID = 0x23
	ZipV2                           CommandClassID = 0x23
	ZwaveCmdClass                   CommandClassID = 0x01
	ApplicationCapability           CommandClassID = 0x57
	ColorControl                    CommandClassID = 0x33
	ColorControlV2                  CommandClassID = 0x33
	Schedule                        CommandClassID = 0x53
	NetworkManagementPrimary        CommandClassID = 0x54
	ZipNd                           CommandClassID = 0x58
	AssociationGrpInfo              CommandClassID = 0x59
	DeviceResetLocally              CommandClassID = 0x5A
	CentralScene                    CommandClassID = 0x5B
	IpAssociation                   CommandClassID = 0x5C
	Antitheft                       CommandClassID = 0x5D
	AntitheftV2                     CommandClassID = 0x5D
	ZwaveplusInfo                   CommandClassID = 0x5E
	ZwaveplusInfoV2                 CommandClassID = 0x5E
	ZipGateway                      CommandClassID = 0x5F
	ZipPortal                       CommandClassID = 0x61
	Appliance                       CommandClassID = 0x64
	Dmx                             CommandClassID = 0x65
	BarrierOperator                 CommandClassID = 0x66
)

func (c CommandClassID) String() string {
	switch c {

	case Alarm:
		return "Command Class Alarm"

	case ApplicationStatus:
		return "Command Class Application Status"

	case AssociationCommandConfiguration:
		return "Command Class Association Command Configuration"

	case Association:
		return "Command Class Association"

	case AvContentDirectoryMd:
		return "Command Class Av Content Directory Md"

	case AvContentSearchMd:
		return "Command Class Av Content Search Md"

	case AvRendererStatus:
		return "Command Class Av Renderer Status"

	case AvTaggingMd:
		return "Command Class Av Tagging Md"

	case BasicTariffInfo:
		return "Command Class Basic Tariff Info"

	case BasicWindowCovering:
		return "Command Class Basic Window Covering"

	case Basic:
		return "Command Class Basic"

	case Battery:
		return "Command Class Battery"

	case ChimneyFan:
		return "Command Class Chimney Fan"

	case ClimateControlSchedule:
		return "Command Class Climate Control Schedule"

	case Clock:
		return "Command Class Clock"

	case Configuration:
		return "Command Class Configuration"

	case ControllerReplication:
		return "Command Class Controller Replication"

	case Crc16Encap:
		return "Command Class CRC16 Encap"

	case DcpConfig:
		return "Command Class Dcp Config"

	case DcpMonitor:
		return "Command Class Dcp Monitor"

	case DoorLockLogging:
		return "Command Class Door Lock Logging"

	case DoorLock:
		return "Command Class Door Lock"

	case EnergyProduction:
		return "Command Class Energy Production"

	case FirmwareUpdateMd:
		return "Command Class Firmware Update Md"

	case GeographicLocation:
		return "Command Class Geographic Location"

	case GroupingName:
		return "Command Class Grouping Name"

	case Hail:
		return "Command Class Hail"

	case HrvControl:
		return "Command Class Hrv Control"

	case HrvStatus:
		return "Command Class Hrv Status"

	case Indicator:
		return "Command Class Indicator"

	case IpConfiguration:
		return "Command Class Ip Configuration"

	case Language:
		return "Command Class Language"

	case Lock:
		return "Command Class Lock"

	case ManufacturerProprietary:
		return "Command Class Manufacturer Proprietary"

	case ManufacturerSpecific:
		return "Command Class Manufacturer Specific"

	case Mark:
		return "Command Class Mark"

	case MeterPulse:
		return "Command Class Meter Pulse"

	case MeterTblConfig:
		return "Command Class Meter Tbl Config"

	case MeterTblMonitor:
		return "Command Class Meter Tbl Monitor"

	case MeterTblPush:
		return "Command Class Meter Tbl Push"

	case Meter:
		return "Command Class Meter"

	case MtpWindowCovering:
		return "Command Class Mtp Window Covering"

	case MultiCmd:
		return "Command Class Multi Cmd"

	case MultiInstanceAssociation:
		return "Command Class Multi Instance Association"

	case MultiInstance:
		return "Command Class Multi Instance"

	case NetworkManagementProxy:
		return "Command Class Network Management Proxy"

	case NetworkManagementBasic:
		return "Command Class Network Management Basic"

	case NetworkManagementInclusion:
		return "Command Class Network Management Inclusion"

	case NoOperation:
		return "NOP"

	case NodeNaming:
		return "Command Class Node Naming"

	case NonInteroperable:
		return "Command Class Non Interoperable"

	case Powerlevel:
		return "Command Class Powerlevel"

	case PrepaymentEncapsulation:
		return "Command Class Prepayment Encapsulation"

	case Prepayment:
		return "Command Class Prepayment"

	case Proprietary:
		return "Command Class Proprietary"

	case Protection:
		return "Command Class Protection"

	case RateTblConfig:
		return "Command Class Rate Tbl Config"

	case RateTblMonitor:
		return "Command Class Rate Tbl Monitor"

	case RemoteAssociationActivate:
		return "Command Class Remote Association Activate"

	case RemoteAssociation:
		return "Command Class Remote Association"

	case SceneActivation:
		return "Command Class Scene Activation"

	case SceneActuatorConf:
		return "Command Class Scene Actuator Conf"

	case SceneControllerConf:
		return "Command Class Scene Controller Conf"

	case ScheduleEntryLock:
		return "Command Class Schedule Entry Lock"

	case ScreenAttributes:
		return "Command Class Screen Attributes"

	case ScreenMd:
		return "Command Class Screen Md"

	case SecurityPanelMode:
		return "Command Class Security Panel Mode"

	case SecurityPanelZoneSensor:
		return "Command Class Security Panel Zone Sensor"

	case SecurityPanelZone:
		return "Command Class Security Panel Zone"

	case Security:
		return "Command Class Security"

	case SensorAlarm:
		return "Command Class Sensor Alarm"

	case SensorBinary:
		return "Command Class Sensor Binary"

	case SensorConfiguration:
		return "Command Class Sensor Configuration"

	case SensorMultilevel:
		return "Command Class Sensor Multilevel"

	case SilenceAlarm:
		return "Command Class Silence Alarm"

	case SimpleAvControl:
		return "Command Class Simple Av Control"

	case SwitchAll:
		return "Command Class Switch All"

	case SwitchBinary:
		return "Command Class Switch Binary"

	case SwitchMultilevel:
		return "Command Class Switch Multilevel"

	case SwitchToggleBinary:
		return "Command Class Switch Toggle Binary"

	case SwitchToggleMultilevel:
		return "Command Class Switch Toggle Multilevel"

	case TariffConfig:
		return "Command Class Tariff Config"

	case TariffTblMonitor:
		return "Command Class Tariff Tbl Monitor"

	case ThermostatFanMode:
		return "Command Class Thermostat Fan Mode"

	case ThermostatFanState:
		return "Command Class Thermostat Fan State"

	case ThermostatHeating:
		return "Command Class Thermostat Heating"

	case ThermostatMode:
		return "Command Class Thermostat Mode"

	case ThermostatOperatingState:
		return "Command Class Thermostat Operating State"

	case ThermostatSetback:
		return "Command Class Thermostat Setback"

	case ThermostatSetpoint:
		return "Command Class Thermostat Setpoint"

	case TimeParameters:
		return "Command Class Time Parameters"

	case Time:
		return "Command Class Time"

	case TransportService:
		return "Command Class Transport Service"

	case UserCode:
		return "Command Class User Code"

	case Version:
		return "Command Class Version"

	case WakeUp:
		return "Command Class Wake Up"

	case ZensorNet:
		return "Command Class Zensor Net"

	case Zip6lowpan:
		return "Command Class Z/IP 6lowpan"

	case Zip:
		return "Command Class Z/IP"

	case ZwaveCmdClass:
		return "Z-Wave protocol Command Class"

	case ApplicationCapability:
		return "Command Class Application Capability"

	case ColorControl:
		return "Command Class Color Control"

	case Schedule:
		return "Command Class Schedule"

	case NetworkManagementPrimary:
		return "Command Class Network Management Primary"

	case ZipNd:
		return "Command Class Z/IP-ND"

	case AssociationGrpInfo:
		return "Command Class Association Group Info"

	case DeviceResetLocally:
		return "Command Class Device Reset Locally"

	case CentralScene:
		return "Command Class Central Scene"

	case IpAssociation:
		return "Command Class Ip Association"

	case Antitheft:
		return "Command Class Anti-theft"

	case ZwaveplusInfo:
		return "Command Class Z-Wave+ Info"

	case ZipGateway:
		return "Command Class Z/IP Gateway"

	case ZipPortal:
		return "Command Class Z/IP Portal"

	case Appliance:
		return "Command Class Appliance"

	case Dmx:
		return "Command Class DMX"

	case BarrierOperator:
		return "Command Class Barrier Operator"

	default:
		return fmt.Sprintf("Unknown (0x%X)", byte(c))
	}
}

func Parse(ccVersion uint8, payload []byte) (interface{}, error) {
	switch {

	case payload[0] == byte(Alarm) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := alarm.AlarmGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := alarm.AlarmReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Alarm")
		}

	case payload[0] == byte(AlarmV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := alarmv2.AlarmGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := alarmv2.AlarmReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := alarmv2.AlarmSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := alarmv2.AlarmTypeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := alarmv2.AlarmTypeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Alarm")
		}

	case payload[0] == byte(NotificationV3) && ccVersion == 3:
		switch payload[1] {
		case 0x04:
			command := notificationv3.NotificationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := notificationv3.NotificationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := notificationv3.NotificationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := notificationv3.NotificationSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := notificationv3.NotificationSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := notificationv3.EventSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := notificationv3.EventSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Notification")
		}

	case payload[0] == byte(NotificationV4) && ccVersion == 4:
		switch payload[1] {
		case 0x04:
			command := notificationv4.NotificationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := notificationv4.NotificationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := notificationv4.NotificationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := notificationv4.NotificationSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := notificationv4.NotificationSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := notificationv4.EventSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := notificationv4.EventSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Notification")
		}

	case payload[0] == byte(ApplicationStatus) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := applicationstatus.ApplicationBusy{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := applicationstatus.ApplicationRejectedRequest{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Application Status")
		}

	case payload[0] == byte(AssociationCommandConfiguration) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := associationcommandconfiguration.CommandConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := associationcommandconfiguration.CommandConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := associationcommandconfiguration.CommandConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := associationcommandconfiguration.CommandRecordsSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := associationcommandconfiguration.CommandRecordsSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association Command Configuration")
		}

	case payload[0] == byte(Association) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := association.AssociationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := association.AssociationGroupingsGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := association.AssociationGroupingsReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := association.AssociationRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := association.AssociationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := association.AssociationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association")
		}

	case payload[0] == byte(AssociationV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := associationv2.AssociationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := associationv2.AssociationGroupingsGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := associationv2.AssociationGroupingsReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := associationv2.AssociationRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := associationv2.AssociationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := associationv2.AssociationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := associationv2.AssociationSpecificGroupGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := associationv2.AssociationSpecificGroupReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association")
		}

	case payload[0] == byte(AvContentDirectoryMd) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := avcontentdirectorymd.AvContentBrowseMdByLetterGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := avcontentdirectorymd.AvContentBrowseMdByLetterReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := avcontentdirectorymd.AvContentBrowseMdChildCountGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := avcontentdirectorymd.AvContentBrowseMdChildCountReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := avcontentdirectorymd.AvContentBrowseMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := avcontentdirectorymd.AvContentBrowseMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := avcontentdirectorymd.AvMatchItemToRendererMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := avcontentdirectorymd.AvMatchItemToRendererMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Av Content Directory Md")
		}

	case payload[0] == byte(AvContentSearchMd) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := avcontentsearchmd.AvContentSearchMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := avcontentsearchmd.AvContentSearchMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Av Content Search Md")
		}

	case payload[0] == byte(AvRendererStatus) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := avrendererstatus.AvRendererStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := avrendererstatus.AvRendererStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Av Renderer Status")
		}

	case payload[0] == byte(AvTaggingMd) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := avtaggingmd.AvTaggingMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := avtaggingmd.AvTaggingMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Av Tagging Md")
		}

	case payload[0] == byte(BasicTariffInfo) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := basictariffinfo.BasicTariffInfoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := basictariffinfo.BasicTariffInfoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Basic Tariff Info")
		}

	case payload[0] == byte(BasicWindowCovering) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := basicwindowcovering.BasicWindowCoveringStartLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := basicwindowcovering.BasicWindowCoveringStopLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Basic Window Covering")
		}

	case payload[0] == byte(Basic) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := basic.BasicGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := basic.BasicReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := basic.BasicSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Basic")
		}

	case payload[0] == byte(Battery) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := battery.BatteryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := battery.BatteryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Battery")
		}

	case payload[0] == byte(ChimneyFan) && ccVersion == 1:
		switch payload[1] {
		case 0x20:
			command := chimneyfan.ChimneyFanAlarmLogGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x21:
			command := chimneyfan.ChimneyFanAlarmLogReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x1F:
			command := chimneyfan.ChimneyFanAlarmLogSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x23:
			command := chimneyfan.ChimneyFanAlarmStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x24:
			command := chimneyfan.ChimneyFanAlarmStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x22:
			command := chimneyfan.ChimneyFanAlarmStatusSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0E:
			command := chimneyfan.ChimneyFanAlarmTempGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0F:
			command := chimneyfan.ChimneyFanAlarmTempReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := chimneyfan.ChimneyFanAlarmTempSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x11:
			command := chimneyfan.ChimneyFanBoostTimeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x12:
			command := chimneyfan.ChimneyFanBoostTimeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x10:
			command := chimneyfan.ChimneyFanBoostTimeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x28:
			command := chimneyfan.ChimneyFanDefaultSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x26:
			command := chimneyfan.ChimneyFanMinSpeedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x27:
			command := chimneyfan.ChimneyFanMinSpeedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x25:
			command := chimneyfan.ChimneyFanMinSpeedSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x17:
			command := chimneyfan.ChimneyFanModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x18:
			command := chimneyfan.ChimneyFanModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x16:
			command := chimneyfan.ChimneyFanModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x1A:
			command := chimneyfan.ChimneyFanSetupGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x1B:
			command := chimneyfan.ChimneyFanSetupReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x19:
			command := chimneyfan.ChimneyFanSetupSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := chimneyfan.ChimneyFanSpeedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := chimneyfan.ChimneyFanSpeedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := chimneyfan.ChimneyFanSpeedSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := chimneyfan.ChimneyFanStartTempGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := chimneyfan.ChimneyFanStartTempReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := chimneyfan.ChimneyFanStartTempSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := chimneyfan.ChimneyFanStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := chimneyfan.ChimneyFanStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := chimneyfan.ChimneyFanStateSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x1D:
			command := chimneyfan.ChimneyFanStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x1E:
			command := chimneyfan.ChimneyFanStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := chimneyfan.ChimneyFanStopTempGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := chimneyfan.ChimneyFanStopTempReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := chimneyfan.ChimneyFanStopTempSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x14:
			command := chimneyfan.ChimneyFanStopTimeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x15:
			command := chimneyfan.ChimneyFanStopTimeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x13:
			command := chimneyfan.ChimneyFanStopTimeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Chimney Fan")
		}

	case payload[0] == byte(ClimateControlSchedule) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := climatecontrolschedule.ScheduleChangedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := climatecontrolschedule.ScheduleChangedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := climatecontrolschedule.ScheduleGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := climatecontrolschedule.ScheduleOverrideGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := climatecontrolschedule.ScheduleOverrideReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := climatecontrolschedule.ScheduleOverrideSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := climatecontrolschedule.ScheduleReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := climatecontrolschedule.ScheduleSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Climate Control Schedule")
		}

	case payload[0] == byte(Clock) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := clock.ClockGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := clock.ClockReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := clock.ClockSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Clock")
		}

	case payload[0] == byte(Configuration) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := configuration.ConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := configuration.ConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := configuration.ConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Configuration")
		}

	case payload[0] == byte(ConfigurationV2) && ccVersion == 2:
		switch payload[1] {
		case 0x08:
			command := configurationv2.ConfigurationBulkGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := configurationv2.ConfigurationBulkReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := configurationv2.ConfigurationBulkSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := configurationv2.ConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := configurationv2.ConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := configurationv2.ConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Configuration")
		}

	case payload[0] == byte(DcpConfig) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := dcpconfig.DcpListRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := dcpconfig.DcpListSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := dcpconfig.DcpListSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := dcpconfig.DcpListSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Dcp Config")
		}

	case payload[0] == byte(DcpMonitor) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := dcpmonitor.DcpEventStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := dcpmonitor.DcpEventStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := dcpmonitor.DcpListGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := dcpmonitor.DcpListReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Dcp Monitor")
		}

	case payload[0] == byte(DoorLockLogging) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := doorlocklogging.DoorLockLoggingRecordsSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := doorlocklogging.DoorLockLoggingRecordsSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := doorlocklogging.RecordGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := doorlocklogging.RecordReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock Logging")
		}

	case payload[0] == byte(DoorLock) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := doorlock.DoorLockConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := doorlock.DoorLockConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := doorlock.DoorLockConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := doorlock.DoorLockOperationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := doorlock.DoorLockOperationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := doorlock.DoorLockOperationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock")
		}

	case payload[0] == byte(DoorLockV2) && ccVersion == 2:
		switch payload[1] {
		case 0x05:
			command := doorlockv2.DoorLockConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := doorlockv2.DoorLockConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := doorlockv2.DoorLockConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := doorlockv2.DoorLockOperationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := doorlockv2.DoorLockOperationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := doorlockv2.DoorLockOperationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Door Lock")
		}

	case payload[0] == byte(EnergyProduction) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := energyproduction.EnergyProductionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := energyproduction.EnergyProductionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Energy Production")
		}

	case payload[0] == byte(FirmwareUpdateMd) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := firmwareupdatemd.FirmwareMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := firmwareupdatemd.FirmwareMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := firmwareupdatemd.FirmwareUpdateMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := firmwareupdatemd.FirmwareUpdateMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := firmwareupdatemd.FirmwareUpdateMdRequestGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := firmwareupdatemd.FirmwareUpdateMdRequestReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := firmwareupdatemd.FirmwareUpdateMdStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Firmware Update Md")
		}

	case payload[0] == byte(FirmwareUpdateMdV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := firmwareupdatemdv2.FirmwareMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := firmwareupdatemdv2.FirmwareMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := firmwareupdatemdv2.FirmwareUpdateMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := firmwareupdatemdv2.FirmwareUpdateMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := firmwareupdatemdv2.FirmwareUpdateMdRequestGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := firmwareupdatemdv2.FirmwareUpdateMdRequestReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := firmwareupdatemdv2.FirmwareUpdateMdStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Firmware Update Md")
		}

	case payload[0] == byte(FirmwareUpdateMdV3) && ccVersion == 3:
		switch payload[1] {
		case 0x01:
			command := firmwareupdatemdv3.FirmwareMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := firmwareupdatemdv3.FirmwareMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := firmwareupdatemdv3.FirmwareUpdateMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := firmwareupdatemdv3.FirmwareUpdateMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := firmwareupdatemdv3.FirmwareUpdateMdRequestGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := firmwareupdatemdv3.FirmwareUpdateMdRequestReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := firmwareupdatemdv3.FirmwareUpdateMdStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Firmware Update Md")
		}

	case payload[0] == byte(GeographicLocation) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := geographiclocation.GeographicLocationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := geographiclocation.GeographicLocationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := geographiclocation.GeographicLocationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Geographic Location")
		}

	case payload[0] == byte(GroupingName) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := groupingname.GroupingNameGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := groupingname.GroupingNameReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := groupingname.GroupingNameSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Grouping Name")
		}

	case payload[0] == byte(Hail) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := hail.Hail{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Hail")
		}

	case payload[0] == byte(HrvControl) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := hrvcontrol.HrvControlBypassGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := hrvcontrol.HrvControlBypassReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := hrvcontrol.HrvControlBypassSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := hrvcontrol.HrvControlModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := hrvcontrol.HrvControlModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := hrvcontrol.HrvControlModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := hrvcontrol.HrvControlModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := hrvcontrol.HrvControlModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := hrvcontrol.HrvControlVentilationRateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := hrvcontrol.HrvControlVentilationRateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := hrvcontrol.HrvControlVentilationRateSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Hrv Control")
		}

	case payload[0] == byte(HrvStatus) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := hrvstatus.HrvStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := hrvstatus.HrvStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := hrvstatus.HrvStatusSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := hrvstatus.HrvStatusSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Hrv Status")
		}

	case payload[0] == byte(Indicator) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := indicator.IndicatorGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := indicator.IndicatorReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := indicator.IndicatorSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Indicator")
		}

	case payload[0] == byte(Language) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := language.LanguageGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := language.LanguageReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := language.LanguageSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Language")
		}

	case payload[0] == byte(Lock) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := lock.LockGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := lock.LockReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := lock.LockSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Lock")
		}

	case payload[0] == byte(ManufacturerSpecific) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := manufacturerspecific.ManufacturerSpecificGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := manufacturerspecific.ManufacturerSpecificReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Manufacturer Specific")
		}

	case payload[0] == byte(ManufacturerSpecificV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := manufacturerspecificv2.ManufacturerSpecificGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := manufacturerspecificv2.ManufacturerSpecificReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := manufacturerspecificv2.DeviceSpecificGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := manufacturerspecificv2.DeviceSpecificReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Manufacturer Specific")
		}

	case payload[0] == byte(MeterPulse) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := meterpulse.MeterPulseGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := meterpulse.MeterPulseReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter Pulse")
		}

	case payload[0] == byte(MeterTblConfig) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := metertblconfig.MeterTblTablePointAdmNoSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter Tbl Config")
		}

	case payload[0] == byte(MeterTblMonitor) && ccVersion == 1:
		switch payload[1] {
		case 0x0B:
			command := metertblmonitor.MeterTblStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := metertblmonitor.MeterTblStatusDateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := metertblmonitor.MeterTblStatusDepthGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := metertblmonitor.MeterTblStatusSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := metertblmonitor.MeterTblStatusSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := metertblmonitor.MeterTblCurrentDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := metertblmonitor.MeterTblCurrentDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0E:
			command := metertblmonitor.MeterTblHistoricalDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0F:
			command := metertblmonitor.MeterTblHistoricalDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := metertblmonitor.MeterTblReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := metertblmonitor.MeterTblTableCapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := metertblmonitor.MeterTblTableIdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := metertblmonitor.MeterTblTableIdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := metertblmonitor.MeterTblTablePointAdmNoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := metertblmonitor.MeterTblTablePointAdmNoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter Tbl Monitor")
		}

	case payload[0] == byte(MeterTblMonitorV2) && ccVersion == 2:
		switch payload[1] {
		case 0x0B:
			command := metertblmonitorv2.MeterTblStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := metertblmonitorv2.MeterTblStatusDateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := metertblmonitorv2.MeterTblStatusDepthGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := metertblmonitorv2.MeterTblStatusSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := metertblmonitorv2.MeterTblStatusSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := metertblmonitorv2.MeterTblCurrentDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := metertblmonitorv2.MeterTblCurrentDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0E:
			command := metertblmonitorv2.MeterTblHistoricalDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0F:
			command := metertblmonitorv2.MeterTblHistoricalDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := metertblmonitorv2.MeterTblReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := metertblmonitorv2.MeterTblTableCapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := metertblmonitorv2.MeterTblTableIdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := metertblmonitorv2.MeterTblTableIdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := metertblmonitorv2.MeterTblTablePointAdmNoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := metertblmonitorv2.MeterTblTablePointAdmNoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter Tbl Monitor")
		}

	case payload[0] == byte(MeterTblPush) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := metertblpush.MeterTblPushConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := metertblpush.MeterTblPushConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := metertblpush.MeterTblPushConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter Tbl Push")
		}

	case payload[0] == byte(Meter) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := meter.MeterGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := meter.MeterReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter")
		}

	case payload[0] == byte(MeterV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := meterv2.MeterGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := meterv2.MeterReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := meterv2.MeterReset{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := meterv2.MeterSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := meterv2.MeterSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter")
		}

	case payload[0] == byte(MeterV3) && ccVersion == 3:
		switch payload[1] {
		case 0x01:
			command := meterv3.MeterGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := meterv3.MeterReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := meterv3.MeterReset{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := meterv3.MeterSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := meterv3.MeterSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter")
		}

	case payload[0] == byte(MeterV4) && ccVersion == 4:
		switch payload[1] {
		case 0x01:
			command := meterv4.MeterGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := meterv4.MeterReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := meterv4.MeterReset{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := meterv4.MeterSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := meterv4.MeterSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Meter")
		}

	case payload[0] == byte(MtpWindowCovering) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := mtpwindowcovering.MoveToPositionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := mtpwindowcovering.MoveToPositionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := mtpwindowcovering.MoveToPositionSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Mtp Window Covering")
		}

	case payload[0] == byte(MultiChannelAssociationV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := multichannelassociationv2.MultiChannelAssociationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := multichannelassociationv2.MultiChannelAssociationGroupingsGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := multichannelassociationv2.MultiChannelAssociationGroupingsReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := multichannelassociationv2.MultiChannelAssociationRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := multichannelassociationv2.MultiChannelAssociationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := multichannelassociationv2.MultiChannelAssociationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Channel Association")
		}

	case payload[0] == byte(MultiChannelV2) && ccVersion == 2:
		switch payload[1] {
		case 0x09:
			command := multichannelv2.MultiChannelCapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := multichannelv2.MultiChannelCapabilityReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := multichannelv2.MultiChannelCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := multichannelv2.MultiChannelEndPointFind{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := multichannelv2.MultiChannelEndPointFindReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := multichannelv2.MultiChannelEndPointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := multichannelv2.MultiChannelEndPointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := multichannelv2.MultiInstanceCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := multichannelv2.MultiInstanceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := multichannelv2.MultiInstanceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Channel")
		}

	case payload[0] == byte(MultiChannelV3) && ccVersion == 3:
		switch payload[1] {
		case 0x09:
			command := multichannelv3.MultiChannelCapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := multichannelv3.MultiChannelCapabilityReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := multichannelv3.MultiChannelCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := multichannelv3.MultiChannelEndPointFind{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := multichannelv3.MultiChannelEndPointFindReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := multichannelv3.MultiChannelEndPointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := multichannelv3.MultiChannelEndPointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := multichannelv3.MultiInstanceCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := multichannelv3.MultiInstanceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := multichannelv3.MultiInstanceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Channel")
		}

	case payload[0] == byte(MultiCmd) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := multicmd.MultiCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Cmd")
		}

	case payload[0] == byte(MultiInstanceAssociation) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := multiinstanceassociation.MultiInstanceAssociationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := multiinstanceassociation.MultiInstanceAssociationGroupingsGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := multiinstanceassociation.MultiInstanceAssociationGroupingsReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := multiinstanceassociation.MultiInstanceAssociationRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := multiinstanceassociation.MultiInstanceAssociationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := multiinstanceassociation.MultiInstanceAssociationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Instance Association")
		}

	case payload[0] == byte(MultiInstance) && ccVersion == 1:
		switch payload[1] {
		case 0x06:
			command := multiinstance.MultiInstanceCmdEncap{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := multiinstance.MultiInstanceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := multiinstance.MultiInstanceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Multi Instance")
		}

	case payload[0] == byte(NetworkManagementProxy) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := networkmanagementproxy.NodeInfoCachedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := networkmanagementproxy.NodeInfoCachedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := networkmanagementproxy.NodeListGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := networkmanagementproxy.NodeListReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Network Management Proxy")
		}

	case payload[0] == byte(NetworkManagementBasic) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := networkmanagementbasic.LearnModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := networkmanagementbasic.LearnModeSetStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := networkmanagementbasic.NodeInformationSend{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := networkmanagementbasic.NetworkUpdateRequest{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := networkmanagementbasic.NetworkUpdateRequestStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := networkmanagementbasic.DefaultSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := networkmanagementbasic.DefaultSetComplete{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Network Management Basic")
		}

	case payload[0] == byte(NetworkManagementInclusion) && ccVersion == 1:
		switch payload[1] {
		case 0x07:
			command := networkmanagementinclusion.FailedNodeRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := networkmanagementinclusion.FailedNodeRemoveStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := networkmanagementinclusion.NodeAdd{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := networkmanagementinclusion.NodeAddStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := networkmanagementinclusion.NodeRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := networkmanagementinclusion.NodeRemoveStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := networkmanagementinclusion.FailedNodeReplace{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := networkmanagementinclusion.FailedNodeReplaceStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := networkmanagementinclusion.NodeNeighborUpdateRequest{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := networkmanagementinclusion.NodeNeighborUpdateStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := networkmanagementinclusion.ReturnRouteAssign{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0E:
			command := networkmanagementinclusion.ReturnRouteAssignComplete{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0F:
			command := networkmanagementinclusion.ReturnRouteDelete{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x10:
			command := networkmanagementinclusion.ReturnRouteDeleteComplete{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Network Management Inclusion")
		}

	case payload[0] == byte(NodeNaming) && ccVersion == 1:
		switch payload[1] {
		case 0x06:
			command := nodenaming.NodeNamingNodeLocationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := nodenaming.NodeNamingNodeLocationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := nodenaming.NodeNamingNodeLocationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := nodenaming.NodeNamingNodeNameGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := nodenaming.NodeNamingNodeNameReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := nodenaming.NodeNamingNodeNameSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Node Naming")
		}

	case payload[0] == byte(Powerlevel) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := powerlevel.PowerlevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := powerlevel.PowerlevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := powerlevel.PowerlevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := powerlevel.PowerlevelTestNodeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := powerlevel.PowerlevelTestNodeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := powerlevel.PowerlevelTestNodeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Powerlevel")
		}

	case payload[0] == byte(PrepaymentEncapsulation) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := prepaymentencapsulation.CmdEncapsulation{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Prepayment Encapsulation")
		}

	case payload[0] == byte(Prepayment) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := prepayment.PrepaymentBalanceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := prepayment.PrepaymentBalanceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := prepayment.PrepaymentSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := prepayment.PrepaymentSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Prepayment")
		}

	case payload[0] == byte(Proprietary) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := proprietary.ProprietaryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := proprietary.ProprietaryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := proprietary.ProprietarySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Proprietary")
		}

	case payload[0] == byte(Protection) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := protection.ProtectionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := protection.ProtectionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := protection.ProtectionSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Protection")
		}

	case payload[0] == byte(ProtectionV2) && ccVersion == 2:
		switch payload[1] {
		case 0x07:
			command := protectionv2.ProtectionEcGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := protectionv2.ProtectionEcReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := protectionv2.ProtectionEcSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := protectionv2.ProtectionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := protectionv2.ProtectionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := protectionv2.ProtectionSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := protectionv2.ProtectionSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := protectionv2.ProtectionSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := protectionv2.ProtectionTimeoutGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := protectionv2.ProtectionTimeoutReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := protectionv2.ProtectionTimeoutSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Protection")
		}

	case payload[0] == byte(RateTblConfig) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := ratetblconfig.RateTblRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := ratetblconfig.RateTblSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Rate Tbl Config")
		}

	case payload[0] == byte(RateTblMonitor) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := ratetblmonitor.RateTblActiveRateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := ratetblmonitor.RateTblActiveRateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := ratetblmonitor.RateTblCurrentDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := ratetblmonitor.RateTblCurrentDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := ratetblmonitor.RateTblGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := ratetblmonitor.RateTblHistoricalDataGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := ratetblmonitor.RateTblHistoricalDataReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := ratetblmonitor.RateTblReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := ratetblmonitor.RateTblSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := ratetblmonitor.RateTblSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Rate Tbl Monitor")
		}

	case payload[0] == byte(RemoteAssociationActivate) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := remoteassociationactivate.RemoteAssociationActivate{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Remote Association Activate")
		}

	case payload[0] == byte(RemoteAssociation) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := remoteassociation.RemoteAssociationConfigurationGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := remoteassociation.RemoteAssociationConfigurationReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := remoteassociation.RemoteAssociationConfigurationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Remote Association")
		}

	case payload[0] == byte(SceneActivation) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := sceneactivation.SceneActivationSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Scene Activation")
		}

	case payload[0] == byte(SceneActuatorConf) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := sceneactuatorconf.SceneActuatorConfGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sceneactuatorconf.SceneActuatorConfReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := sceneactuatorconf.SceneActuatorConfSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Scene Actuator Conf")
		}

	case payload[0] == byte(SceneControllerConf) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := scenecontrollerconf.SceneControllerConfGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := scenecontrollerconf.SceneControllerConfReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := scenecontrollerconf.SceneControllerConfSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Scene Controller Conf")
		}

	case payload[0] == byte(ScheduleEntryLock) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := scheduleentrylock.ScheduleEntryLockEnableAllSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := scheduleentrylock.ScheduleEntryLockEnableSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := scheduleentrylock.ScheduleEntryLockWeekDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := scheduleentrylock.ScheduleEntryLockWeekDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := scheduleentrylock.ScheduleEntryLockWeekDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := scheduleentrylock.ScheduleEntryLockYearDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := scheduleentrylock.ScheduleEntryLockYearDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := scheduleentrylock.ScheduleEntryLockYearDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := scheduleentrylock.ScheduleEntryTypeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := scheduleentrylock.ScheduleEntryTypeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Schedule Entry Lock")
		}

	case payload[0] == byte(ScheduleEntryLockV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := scheduleentrylockv2.ScheduleEntryLockEnableAllSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := scheduleentrylockv2.ScheduleEntryLockEnableSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := scheduleentrylockv2.ScheduleEntryLockWeekDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := scheduleentrylockv2.ScheduleEntryLockWeekDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := scheduleentrylockv2.ScheduleEntryLockWeekDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := scheduleentrylockv2.ScheduleEntryLockYearDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := scheduleentrylockv2.ScheduleEntryLockYearDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := scheduleentrylockv2.ScheduleEntryLockYearDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := scheduleentrylockv2.ScheduleEntryTypeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := scheduleentrylockv2.ScheduleEntryTypeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Schedule Entry Lock")
		}

	case payload[0] == byte(ScheduleEntryLockV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := scheduleentrylockv3.ScheduleEntryLockEnableAllSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := scheduleentrylockv3.ScheduleEntryLockEnableSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := scheduleentrylockv3.ScheduleEntryLockTimeOffsetGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := scheduleentrylockv3.ScheduleEntryLockTimeOffsetReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0D:
			command := scheduleentrylockv3.ScheduleEntryLockTimeOffsetSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := scheduleentrylockv3.ScheduleEntryLockWeekDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := scheduleentrylockv3.ScheduleEntryLockWeekDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := scheduleentrylockv3.ScheduleEntryLockWeekDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := scheduleentrylockv3.ScheduleEntryLockYearDayGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := scheduleentrylockv3.ScheduleEntryLockYearDayReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := scheduleentrylockv3.ScheduleEntryLockYearDaySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := scheduleentrylockv3.ScheduleEntryTypeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := scheduleentrylockv3.ScheduleEntryTypeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0E:
			command := scheduleentrylockv3.ScheduleEntryLockDailyRepeatingGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0F:
			command := scheduleentrylockv3.ScheduleEntryLockDailyRepeatingReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x10:
			command := scheduleentrylockv3.ScheduleEntryLockDailyRepeatingSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Schedule Entry Lock")
		}

	case payload[0] == byte(ScreenAttributes) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := screenattributes.ScreenAttributesGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := screenattributes.ScreenAttributesReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Screen Attributes")
		}

	case payload[0] == byte(ScreenAttributesV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := screenattributesv2.ScreenAttributesGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := screenattributesv2.ScreenAttributesReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Screen Attributes")
		}

	case payload[0] == byte(ScreenMd) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := screenmd.ScreenMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := screenmd.ScreenMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Screen Md")
		}

	case payload[0] == byte(ScreenMdV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := screenmdv2.ScreenMdGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := screenmdv2.ScreenMdReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Screen Md")
		}

	case payload[0] == byte(SecurityPanelMode) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := securitypanelmode.SecurityPanelModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := securitypanelmode.SecurityPanelModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := securitypanelmode.SecurityPanelModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := securitypanelmode.SecurityPanelModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := securitypanelmode.SecurityPanelModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Security Panel Mode")
		}

	case payload[0] == byte(SecurityPanelZoneSensor) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := securitypanelzonesensor.CommandClassSecurityPanelZoneSensorInstalledReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := securitypanelzonesensor.SecurityPanelZoneSensorTypeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := securitypanelzonesensor.SecurityPanelZoneSensorTypeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := securitypanelzonesensor.SecurityPanelZoneSensorInstalledGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := securitypanelzonesensor.SecurityPanelZoneSensorStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := securitypanelzonesensor.SecurityPanelZoneSensorStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Security Panel Zone Sensor")
		}

	case payload[0] == byte(SecurityPanelZone) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := securitypanelzone.SecurityPanelZoneNumberSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := securitypanelzone.SecurityPanelZoneStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := securitypanelzone.SecurityPanelZoneStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := securitypanelzone.SecurityPanelZoneSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := securitypanelzone.SecurityPanelZoneTypeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := securitypanelzone.SecurityPanelZoneTypeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Security Panel Zone")
		}

	case payload[0] == byte(Security) && ccVersion == 1:
		switch payload[1] {
		case 0x06:
			command := security.NetworkKeySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := security.NetworkKeyVerify{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := security.SecurityCommandsSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := security.SecurityCommandsSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x81:
			command := security.SecurityMessageEncapsulation{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0xC1:
			command := security.SecurityMessageEncapsulationNonceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x40:
			command := security.SecurityNonceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x80:
			command := security.SecurityNonceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := security.SecuritySchemeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := security.SecuritySchemeInherit{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := security.SecuritySchemeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Security")
		}

	case payload[0] == byte(SensorAlarm) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := sensoralarm.SensorAlarmGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := sensoralarm.SensorAlarmReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensoralarm.SensorAlarmSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := sensoralarm.SensorAlarmSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Alarm")
		}

	case payload[0] == byte(SensorBinary) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := sensorbinary.SensorBinaryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensorbinary.SensorBinaryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Binary")
		}

	case payload[0] == byte(SensorBinaryV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := sensorbinaryv2.SensorBinaryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensorbinaryv2.SensorBinaryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := sensorbinaryv2.SensorBinarySupportedGetSensor{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := sensorbinaryv2.SensorBinarySupportedSensorReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Binary")
		}

	case payload[0] == byte(SensorConfiguration) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := sensorconfiguration.SensorTriggerLevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensorconfiguration.SensorTriggerLevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := sensorconfiguration.SensorTriggerLevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Configuration")
		}

	case payload[0] == byte(SensorMultilevel) && ccVersion == 1:
		switch payload[1] {
		case 0x04:
			command := sensormultilevel.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevel.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV2) && ccVersion == 2:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv2.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevelv2.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV3) && ccVersion == 3:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv3.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevelv3.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV4) && ccVersion == 4:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv4.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevelv4.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV5) && ccVersion == 5:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv5.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevelv5.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := sensormultilevelv5.SensorMultilevelSupportedGetSensor{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := sensormultilevelv5.SensorMultilevelSupportedSensorReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensormultilevelv5.SensorMultilevelSupportedGetScale{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := sensormultilevelv5.SensorMultilevelSupportedScaleReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SensorMultilevelV6) && ccVersion == 6:
		switch payload[1] {
		case 0x04:
			command := sensormultilevelv6.SensorMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := sensormultilevelv6.SensorMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := sensormultilevelv6.SensorMultilevelSupportedGetSensor{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := sensormultilevelv6.SensorMultilevelSupportedSensorReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := sensormultilevelv6.SensorMultilevelSupportedGetScale{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := sensormultilevelv6.SensorMultilevelSupportedScaleReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Sensor Multilevel")
		}

	case payload[0] == byte(SilenceAlarm) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := silencealarm.SensorAlarmSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Silence Alarm")
		}

	case payload[0] == byte(SimpleAvControl) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := simpleavcontrol.SimpleAvControlGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := simpleavcontrol.SimpleAvControlReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := simpleavcontrol.SimpleAvControlSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := simpleavcontrol.SimpleAvControlSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := simpleavcontrol.SimpleAvControlSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Simple Av Control")
		}

	case payload[0] == byte(SwitchAll) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := switchall.SwitchAllGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := switchall.SwitchAllOff{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := switchall.SwitchAllOn{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchall.SwitchAllReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := switchall.SwitchAllSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch All")
		}

	case payload[0] == byte(SwitchBinary) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := switchbinary.SwitchBinaryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchbinary.SwitchBinaryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := switchbinary.SwitchBinarySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Binary")
		}

	case payload[0] == byte(SwitchMultilevel) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := switchmultilevel.SwitchMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchmultilevel.SwitchMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := switchmultilevel.SwitchMultilevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := switchmultilevel.SwitchMultilevelStartLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := switchmultilevel.SwitchMultilevelStopLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Multilevel")
		}

	case payload[0] == byte(SwitchMultilevelV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := switchmultilevelv2.SwitchMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchmultilevelv2.SwitchMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := switchmultilevelv2.SwitchMultilevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := switchmultilevelv2.SwitchMultilevelStartLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := switchmultilevelv2.SwitchMultilevelStopLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Multilevel")
		}

	case payload[0] == byte(SwitchMultilevelV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := switchmultilevelv3.SwitchMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchmultilevelv3.SwitchMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := switchmultilevelv3.SwitchMultilevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := switchmultilevelv3.SwitchMultilevelStartLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := switchmultilevelv3.SwitchMultilevelStopLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := switchmultilevelv3.SwitchMultilevelSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := switchmultilevelv3.SwitchMultilevelSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Multilevel")
		}

	case payload[0] == byte(SwitchToggleBinary) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := switchtogglebinary.SwitchToggleBinarySet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := switchtogglebinary.SwitchToggleBinaryGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchtogglebinary.SwitchToggleBinaryReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Toggle Binary")
		}

	case payload[0] == byte(SwitchToggleMultilevel) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := switchtogglemultilevel.SwitchToggleMultilevelSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := switchtogglemultilevel.SwitchToggleMultilevelGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := switchtogglemultilevel.SwitchToggleMultilevelReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := switchtogglemultilevel.SwitchToggleMultilevelStartLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := switchtogglemultilevel.SwitchToggleMultilevelStopLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Switch Toggle Multilevel")
		}

	case payload[0] == byte(TariffConfig) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := tariffconfig.TariffTblRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := tariffconfig.TariffTblSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := tariffconfig.TariffTblSupplierSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Tariff Config")
		}

	case payload[0] == byte(TariffTblMonitor) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := tarifftblmonitor.TariffTblCostGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := tarifftblmonitor.TariffTblCostReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := tarifftblmonitor.TariffTblGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := tarifftblmonitor.TariffTblReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := tarifftblmonitor.TariffTblSupplierGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := tarifftblmonitor.TariffTblSupplierReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Tariff Tbl Monitor")
		}

	case payload[0] == byte(ThermostatFanMode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmode.ThermostatFanModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatfanmode.ThermostatFanModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatfanmode.ThermostatFanModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatfanmode.ThermostatFanModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatfanmode.ThermostatFanModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev2.ThermostatFanModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatfanmodev2.ThermostatFanModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatfanmodev2.ThermostatFanModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatfanmodev2.ThermostatFanModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatfanmodev2.ThermostatFanModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev3.ThermostatFanModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatfanmodev3.ThermostatFanModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatfanmodev3.ThermostatFanModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatfanmodev3.ThermostatFanModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatfanmodev3.ThermostatFanModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanModeV4) && ccVersion == 4:
		switch payload[1] {
		case 0x02:
			command := thermostatfanmodev4.ThermostatFanModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatfanmodev4.ThermostatFanModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatfanmodev4.ThermostatFanModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatfanmodev4.ThermostatFanModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatfanmodev4.ThermostatFanModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan Mode")
		}

	case payload[0] == byte(ThermostatFanState) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatfanstate.ThermostatFanStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatfanstate.ThermostatFanStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Fan State")
		}

	case payload[0] == byte(ThermostatHeating) && ccVersion == 1:
		switch payload[1] {
		case 0x0D:
			command := thermostatheating.ThermostatHeatingStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := thermostatheating.ThermostatHeatingModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatheating.ThermostatHeatingModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatheating.ThermostatHeatingModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := thermostatheating.ThermostatHeatingRelayStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := thermostatheating.ThermostatHeatingRelayStatusReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatheating.ThermostatHeatingSetpointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := thermostatheating.ThermostatHeatingSetpointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatheating.ThermostatHeatingSetpointSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0C:
			command := thermostatheating.ThermostatHeatingStatusGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0B:
			command := thermostatheating.ThermostatHeatingStatusSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x11:
			command := thermostatheating.ThermostatHeatingTimedOffSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Heating")
		}

	case payload[0] == byte(ThermostatMode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatmode.ThermostatModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatmode.ThermostatModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatmode.ThermostatModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatmode.ThermostatModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatmode.ThermostatModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatModeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatmodev2.ThermostatModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatmodev2.ThermostatModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatmodev2.ThermostatModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatmodev2.ThermostatModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatmodev2.ThermostatModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatModeV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatmodev3.ThermostatModeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatmodev3.ThermostatModeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatmodev3.ThermostatModeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatmodev3.ThermostatModeSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatmodev3.ThermostatModeSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Mode")
		}

	case payload[0] == byte(ThermostatOperatingState) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatoperatingstate.ThermostatOperatingStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatoperatingstate.ThermostatOperatingStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Operating State")
		}

	case payload[0] == byte(ThermostatOperatingStateV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatoperatingstatev2.ThermostatOperatingStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatoperatingstatev2.ThermostatOperatingStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatoperatingstatev2.ThermostatOperatingStateLoggingSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatoperatingstatev2.ThermostatOperatingLoggingSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatoperatingstatev2.ThermostatOperatingStateLoggingGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := thermostatoperatingstatev2.ThermostatOperatingStateLoggingReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Operating State")
		}

	case payload[0] == byte(ThermostatSetback) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatsetback.ThermostatSetbackGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatsetback.ThermostatSetbackReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatsetback.ThermostatSetbackSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setback")
		}

	case payload[0] == byte(ThermostatSetpoint) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpoint.ThermostatSetpointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatsetpoint.ThermostatSetpointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatsetpoint.ThermostatSetpointSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatsetpoint.ThermostatSetpointSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatsetpoint.ThermostatSetpointSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(ThermostatSetpointV2) && ccVersion == 2:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpointv2.ThermostatSetpointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatsetpointv2.ThermostatSetpointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatsetpointv2.ThermostatSetpointSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatsetpointv2.ThermostatSetpointSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatsetpointv2.ThermostatSetpointSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(ThermostatSetpointV3) && ccVersion == 3:
		switch payload[1] {
		case 0x02:
			command := thermostatsetpointv3.ThermostatSetpointGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := thermostatsetpointv3.ThermostatSetpointReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := thermostatsetpointv3.ThermostatSetpointSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := thermostatsetpointv3.ThermostatSetpointSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := thermostatsetpointv3.ThermostatSetpointSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := thermostatsetpointv3.ThermostatSetpointCapabilitiesGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := thermostatsetpointv3.ThermostatSetpointCapabilitiesReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Thermostat Setpoint")
		}

	case payload[0] == byte(TimeParameters) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := timeparameters.TimeParametersGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := timeparameters.TimeParametersReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := timeparameters.TimeParametersSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Time Parameters")
		}

	case payload[0] == byte(Time) && ccVersion == 1:
		switch payload[1] {
		case 0x03:
			command := time.DateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := time.DateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := time.TimeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := time.TimeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Time")
		}

	case payload[0] == byte(TimeV2) && ccVersion == 2:
		switch payload[1] {
		case 0x03:
			command := timev2.DateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := timev2.DateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := timev2.TimeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := timev2.TimeOffsetGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := timev2.TimeOffsetReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := timev2.TimeOffsetSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := timev2.TimeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Time")
		}

	case payload[0] == byte(UserCode) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := usercode.UserCodeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := usercode.UserCodeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := usercode.UserCodeSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := usercode.UsersNumberGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := usercode.UsersNumberReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class User Code")
		}

	case payload[0] == byte(Version) && ccVersion == 1:
		switch payload[1] {
		case 0x13:
			command := version.VersionCommandClassGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x14:
			command := version.VersionCommandClassReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x11:
			command := version.VersionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x12:
			command := version.VersionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Version")
		}

	case payload[0] == byte(VersionV2) && ccVersion == 2:
		switch payload[1] {
		case 0x13:
			command := versionv2.VersionCommandClassGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x14:
			command := versionv2.VersionCommandClassReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x11:
			command := versionv2.VersionGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x12:
			command := versionv2.VersionReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Version")
		}

	case payload[0] == byte(WakeUp) && ccVersion == 1:
		switch payload[1] {
		case 0x05:
			command := wakeup.WakeUpIntervalGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := wakeup.WakeUpIntervalReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := wakeup.WakeUpIntervalSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := wakeup.WakeUpNoMoreInformation{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := wakeup.WakeUpNotification{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Wake Up")
		}

	case payload[0] == byte(WakeUpV2) && ccVersion == 2:
		switch payload[1] {
		case 0x09:
			command := wakeupv2.WakeUpIntervalCapabilitiesGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x0A:
			command := wakeupv2.WakeUpIntervalCapabilitiesReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := wakeupv2.WakeUpIntervalGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := wakeupv2.WakeUpIntervalReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := wakeupv2.WakeUpIntervalSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := wakeupv2.WakeUpNoMoreInformation{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := wakeupv2.WakeUpNotification{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Wake Up")
		}

	case payload[0] == byte(ZensorNet) && ccVersion == 1:
		switch payload[1] {
		case 0x02:
			command := zensornet.BindAccept{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := zensornet.BindComplete{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x01:
			command := zensornet.BindRequest{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Zensor Net")
		}

	case payload[0] == byte(ApplicationCapability) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := applicationcapability.CommandCommandClassNotSupported{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Application Capability")
		}

	case payload[0] == byte(ColorControl) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := colorcontrol.CapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := colorcontrol.CapabilityReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := colorcontrol.StateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := colorcontrol.StateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := colorcontrol.StateSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := colorcontrol.StartCapabilityLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := colorcontrol.StopStateChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Color Control")
		}

	case payload[0] == byte(ColorControlV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := colorcontrolv2.CapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := colorcontrolv2.CapabilityReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := colorcontrolv2.StateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := colorcontrolv2.StateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := colorcontrolv2.StateSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := colorcontrolv2.StartCapabilityLevelChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := colorcontrolv2.StopStateChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Color Control")
		}

	case payload[0] == byte(Schedule) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := schedule.ScheduleSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := schedule.ScheduleSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := schedule.CommandScheduleSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := schedule.CommandScheduleGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := schedule.CommandScheduleReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := schedule.ScheduleRemove{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := schedule.ScheduleStateSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := schedule.ScheduleStateGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x09:
			command := schedule.ScheduleStateReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Schedule")
		}

	case payload[0] == byte(NetworkManagementPrimary) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := networkmanagementprimary.ControllerChange{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := networkmanagementprimary.ControllerChangeStatus{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Network Management Primary")
		}

	case payload[0] == byte(AssociationGrpInfo) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := associationgrpinfo.AssociationGroupNameGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := associationgrpinfo.AssociationGroupNameReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := associationgrpinfo.AssociationGroupInfoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := associationgrpinfo.AssociationGroupInfoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := associationgrpinfo.AssociationGroupCommandListGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := associationgrpinfo.AssociationGroupCommandListReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Association Group Info")
		}

	case payload[0] == byte(DeviceResetLocally) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := deviceresetlocally.DeviceResetLocallyNotification{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Device Reset Locally")
		}

	case payload[0] == byte(CentralScene) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := centralscene.CentralSceneSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := centralscene.CentralSceneSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := centralscene.CentralSceneNotification{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Central Scene")
		}

	case payload[0] == byte(Antitheft) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := antitheft.AntitheftSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := antitheft.AntitheftGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := antitheft.AntitheftReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Anti-theft")
		}

	case payload[0] == byte(AntitheftV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := antitheftv2.AntitheftSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := antitheftv2.AntitheftGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := antitheftv2.AntitheftReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Anti-theft")
		}

	case payload[0] == byte(ZwaveplusInfo) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := zwaveplusinfo.ZwaveplusInfoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := zwaveplusinfo.ZwaveplusInfoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Z-Wave+ Info")
		}

	case payload[0] == byte(ZwaveplusInfoV2) && ccVersion == 2:
		switch payload[1] {
		case 0x01:
			command := zwaveplusinfov2.ZwaveplusInfoGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := zwaveplusinfov2.ZwaveplusInfoReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Z-Wave+ Info")
		}

	case payload[0] == byte(Appliance) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := appliance.ApplianceTypeGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := appliance.ApplianceTypeReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := appliance.ApplianceProgramSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := appliance.ApplianceProgramSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := appliance.ApplianceSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := appliance.ApplianceGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := appliance.ApplianceReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Appliance")
		}

	case payload[0] == byte(Dmx) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := dmx.DmxAddressSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := dmx.DmxAddressGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := dmx.DmxAddressReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := dmx.DmxCapabilityGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := dmx.DmxCapabilityReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := dmx.DmxData40{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class DMX")
		}

	case payload[0] == byte(BarrierOperator) && ccVersion == 1:
		switch payload[1] {
		case 0x01:
			command := barrieroperator.BarrierOperatorSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x02:
			command := barrieroperator.BarrierOperatorGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x03:
			command := barrieroperator.BarrierOperatorReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x04:
			command := barrieroperator.BarrierOperatorSignalSupportedGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x05:
			command := barrieroperator.BarrierOperatorSignalSupportedReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x06:
			command := barrieroperator.BarrierOperatorSignalSet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x07:
			command := barrieroperator.BarrierOperatorSignalGet{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		case 0x08:
			command := barrieroperator.BarrierOperatorSignalReport{}
			if err := command.UnmarshalBinary(payload[2:]); err != nil {
				return nil, err
			}
			return command, nil
		default:
			return nil, errors.New("Unknown command in command class Command Class Barrier Operator")
		}

	default:
		return nil, errors.New("Unknown command class")
	}
}
