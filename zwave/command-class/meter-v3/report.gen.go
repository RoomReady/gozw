// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package meterv3

import (
	"encoding/binary"
	"errors"
)

// <no value>

type MeterReport struct {
	Properties1 struct {
		MeterType byte

		RateType byte

		Scale2 bool
	}

	Properties2 struct {
		Size byte

		Scale byte

		Precision byte
	}

	MeterValue []byte

	DeltaTime uint16

	PreviousMeterValue []byte
}

func (cmd *MeterReport) UnmarshalBinary(payload []byte) error {
	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MeterType = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) << 5

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Scale2 = true
	} else {
		cmd.Properties1.Scale2 = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.Size = (payload[i] & 0x07)

	cmd.Properties2.Scale = (payload[i] & 0x18) << 3

	cmd.Properties2.Precision = (payload[i] & 0xE0) << 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MeterValue = payload[i : i+1]
	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DeltaTime = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PreviousMeterValue = payload[i : i+1]
	i += 1

	return nil
}
