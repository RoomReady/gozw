// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package sceneactuatorconf

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(SceneActuatorConfSet{})
}

// <no value>
type SceneActuatorConfSet struct {
	SceneId byte

	DimmingDuration byte

	Level2 struct {
		Override bool
	}

	Level byte
}

func (cmd *SceneActuatorConfSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SceneId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DimmingDuration = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if payload[i]&0x80 == 0x80 {
		cmd.Level2.Override = true
	} else {
		cmd.Level2.Override = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level = payload[i]
	i++

	return nil
}

func (cmd *SceneActuatorConfSet) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.SceneId)

	payload = append(payload, cmd.DimmingDuration)

	{
		var val byte

		if cmd.Level2.Override {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.Level)

	return
}
