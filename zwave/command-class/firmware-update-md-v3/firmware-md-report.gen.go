// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package firmwareupdatemdv3

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(FirmwareMdReport{})
}

// <no value>
type FirmwareMdReport struct {
	ManufacturerId uint16

	Firmware0Id uint16

	Firmware0Checksum uint16

	FirmwareUpgradable byte

	NumberOfFirmwareTargets byte

	MaxFragmentSize uint16
}

func (cmd *FirmwareMdReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ManufacturerId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Firmware0Id = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Firmware0Checksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FirmwareUpgradable = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfFirmwareTargets = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaxFragmentSize = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *FirmwareMdReport) MarshalBinary() (payload []byte, err error) {

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ManufacturerId)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Firmware0Id)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Firmware0Checksum)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.FirmwareUpgradable)

	payload = append(payload, cmd.NumberOfFirmwareTargets)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.MaxFragmentSize)
		payload = append(payload, buf...)
	}

	return
}
