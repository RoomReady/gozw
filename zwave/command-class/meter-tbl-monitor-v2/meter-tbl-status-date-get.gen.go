// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package metertblmonitorv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(MeterTblStatusDateGet{})
}

// <no value>
type MeterTblStatusDateGet struct {
	MaximumReports byte

	StartYear uint16

	StartMonth byte

	StartDay byte

	StartHourLocalTime byte

	StartMinuteLocalTime byte

	StartSecondLocalTime byte

	StopYear uint16

	StopMonth byte

	StopDay byte

	StopHourLocalTime byte

	StopMinuteLocalTime byte

	StopSecondLocalTime byte
}

func (cmd *MeterTblStatusDateGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaximumReports = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartYear = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartMonth = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartDay = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartHourLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartMinuteLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartSecondLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopYear = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopMonth = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopDay = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopHourLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopMinuteLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopSecondLocalTime = payload[i]
	i++

	return nil
}

func (cmd *MeterTblStatusDateGet) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.MaximumReports)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.StartYear)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.StartMonth)

	payload = append(payload, cmd.StartDay)

	payload = append(payload, cmd.StartHourLocalTime)

	payload = append(payload, cmd.StartMinuteLocalTime)

	payload = append(payload, cmd.StartSecondLocalTime)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.StopYear)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.StopMonth)

	payload = append(payload, cmd.StopDay)

	payload = append(payload, cmd.StopHourLocalTime)

	payload = append(payload, cmd.StopMinuteLocalTime)

	payload = append(payload, cmd.StopSecondLocalTime)

	return
}
