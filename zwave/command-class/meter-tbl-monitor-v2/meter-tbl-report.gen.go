// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package metertblmonitorv2

import (
	"encoding/binary"
	"errors"
)

// <no value>

type MeterTblReport struct {
	Properties1 struct {
		MeterType byte

		RateType byte
	}

	Properties2 struct {
		PayMeter byte
	}

	DatasetSupported uint32

	DatasetHistorySupported uint32

	DataHistorySupported uint32
}

func (cmd *MeterTblReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MeterType = (payload[i] & 0x3F)

	cmd.Properties1.RateType = (payload[i] & 0xC0) >> 6

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.PayMeter = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DatasetSupported = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DatasetHistorySupported = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DataHistorySupported = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	return nil
}

func (cmd *MeterTblReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.MeterType) & byte(0x3F)

		val |= (cmd.Properties1.RateType << byte(6)) & byte(0xC0)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.PayMeter) & byte(0x0F)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DatasetSupported)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DatasetHistorySupported)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DataHistorySupported)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	return
}
