// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package associationgrpinfo

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(AssociationGroupInfoReport{})
}

// <no value>
type AssociationGroupInfoReport struct {
	Properties1 struct {
		GroupCount byte

		DynamicInfo bool

		ListMode bool
	}
}

func (cmd *AssociationGroupInfoReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.GroupCount = (payload[i] & 0x3F)

	if payload[i]&0x40 == 0x40 {
		cmd.Properties1.DynamicInfo = true
	} else {
		cmd.Properties1.DynamicInfo = false
	}

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.ListMode = true
	} else {
		cmd.Properties1.ListMode = false
	}

	i += 1

	return nil
}

func (cmd *AssociationGroupInfoReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.GroupCount) & byte(0x3F)

		if cmd.Properties1.DynamicInfo {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.ListMode {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
