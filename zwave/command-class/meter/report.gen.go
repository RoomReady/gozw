// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package meter

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(MeterReport{})
}

// <no value>
type MeterReport struct {
	MeterType byte

	Properties1 struct {
		Size byte

		Scale byte

		Precision byte
	}

	MeterValue []byte
}

func (cmd *MeterReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MeterType = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Size = (payload[i] & 0x07)

	cmd.Properties1.Scale = (payload[i] & 0x18) >> 3

	cmd.Properties1.Precision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MeterValue = payload[i : i+1]
	i += 1

	return nil
}

func (cmd *MeterReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.MeterType)

	{
		var val byte

		val |= (cmd.Properties1.Size) & byte(0x07)

		val |= (cmd.Properties1.Scale << byte(3)) & byte(0x18)

		val |= (cmd.Properties1.Precision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.MeterValue != nil && len(cmd.MeterValue) > 0 {
		payload = append(payload, cmd.MeterValue...)
	}

	return
}
