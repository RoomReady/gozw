// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package meterv4

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(MeterSupportedReport{})
}

// <no value>
type MeterSupportedReport struct {
	Properties1 struct {
		MeterReset bool

		MeterType byte

		RateType byte
	}

	Properties2 struct {
		ScaleSupported0 byte

		Mst bool
	}

	NumberOfScaleSupportedBytesToFollow byte

	ScaleSupported []byte
}

func (cmd *MeterSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MeterType = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) >> 5

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.MeterReset = true
	} else {
		cmd.Properties1.MeterReset = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ScaleSupported0 = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties2.Mst = true
	} else {
		cmd.Properties2.Mst = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfScaleSupportedBytesToFollow = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ScaleSupported = payload[i : i+2]
	i += 2

	return nil
}

func (cmd *MeterSupportedReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.MeterType) & byte(0x1F)

		val |= (cmd.Properties1.RateType << byte(5)) & byte(0x60)

		if cmd.Properties1.MeterReset {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.ScaleSupported0) & byte(0x7F)

		if cmd.Properties2.Mst {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfScaleSupportedBytesToFollow)

	if cmd.ScaleSupported != nil && len(cmd.ScaleSupported) > 0 {
		payload = append(payload, cmd.ScaleSupported...)
	}

	return
}
