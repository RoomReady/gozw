// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package switchtogglemultilevel

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(SwitchToggleMultilevelStartLevelChange{})
}

// <no value>
type SwitchToggleMultilevelStartLevelChange struct {
	Level struct {
		IgnoreStartLevel bool

		RollOver bool
	}

	StartLevel byte
}

func (cmd *SwitchToggleMultilevelStartLevelChange) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if payload[i]&0x20 == 0x20 {
		cmd.Level.IgnoreStartLevel = true
	} else {
		cmd.Level.IgnoreStartLevel = false
	}

	if payload[i]&0x80 == 0x80 {
		cmd.Level.RollOver = true
	} else {
		cmd.Level.RollOver = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartLevel = payload[i]
	i++

	return nil
}

func (cmd *SwitchToggleMultilevelStartLevelChange) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		if cmd.Level.IgnoreStartLevel {
			val |= byte(0x20) // flip bits on
		} else {
			val &= ^byte(0x20) // flip bits off
		}

		if cmd.Level.RollOver {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.StartLevel)

	return
}
