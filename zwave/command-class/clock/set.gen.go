// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package clock

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(Set{})
}

// <no value>
type Set struct {
	Level struct {
		Hour byte

		Weekday byte
	}

	Minute byte
}

func (cmd Set) CommandClassID() byte {
	return 0x81
}

func (cmd Set) CommandID() byte {
	return byte(CommandSet)
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.Hour = (payload[i] & 0x1F)

	cmd.Level.Weekday = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Minute = payload[i]
	i++

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = cmd.CommandClassID()
	payload[1] = cmd.CommandID()

	{
		var val byte

		val |= (cmd.Level.Hour) & byte(0x1F)

		val |= (cmd.Level.Weekday << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.Minute)

	return
}
