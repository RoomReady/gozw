// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package protectionv2

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ProtectionSet{})
}

// <no value>
type ProtectionSet struct {
	Level struct {
		LocalProtectionState byte
	}

	Level2 struct {
		RfProtectionState byte
	}
}

func (cmd *ProtectionSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.LocalProtectionState = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level2.RfProtectionState = (payload[i] & 0x0F)

	i += 1

	return nil
}

func (cmd *ProtectionSet) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Level.LocalProtectionState) & byte(0x0F)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Level2.RfProtectionState) & byte(0x0F)

		payload = append(payload, val)
	}

	return
}
