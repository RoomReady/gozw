// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package protectionv2

import (
	"encoding/binary"
	"errors"
)

// <no value>

type ProtectionSupportedReport struct {
	Level struct {
		Timeout bool

		ExclusiveControl bool
	}

	LocalProtectionState uint16

	RfProtectionState uint16
}

func (cmd *ProtectionSupportedReport) UnmarshalBinary(payload []byte) error {
	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if payload[i]&0x01 == 0x01 {
		cmd.Level.Timeout = true
	} else {
		cmd.Level.Timeout = false
	}

	if payload[i]&0x02 == 0x02 {
		cmd.Level.ExclusiveControl = true
	} else {
		cmd.Level.ExclusiveControl = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.LocalProtectionState = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RfProtectionState = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}
