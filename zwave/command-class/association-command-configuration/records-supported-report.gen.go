// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package associationcommandconfiguration

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(CommandRecordsSupportedReport{})
}

// <no value>
type CommandRecordsSupportedReport struct {
	Properties1 struct {
		MaxCommandLength byte

		ConfCmd bool

		Vc bool
	}

	FreeCommandRecords uint16

	MaxCommandRecords uint16
}

func (cmd *CommandRecordsSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MaxCommandLength = (payload[i] & 0xFC) >> 2

	if payload[i]&0x01 == 0x01 {
		cmd.Properties1.ConfCmd = true
	} else {
		cmd.Properties1.ConfCmd = false
	}

	if payload[i]&0x02 == 0x02 {
		cmd.Properties1.Vc = true
	} else {
		cmd.Properties1.Vc = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FreeCommandRecords = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaxCommandRecords = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *CommandRecordsSupportedReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.MaxCommandLength << byte(2)) & byte(0xFC)

		if cmd.Properties1.ConfCmd {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.Properties1.Vc {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.FreeCommandRecords)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.MaxCommandRecords)
		payload = append(payload, buf...)
	}

	return
}
