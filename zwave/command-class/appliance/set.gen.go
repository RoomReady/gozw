// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package appliance

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ApplianceSet{})
}

// <no value>
type ApplianceSet struct {
	Properties1 struct {
		NoOfManufacturerDataFields byte

		ApplianceMode byte
	}

	ApplianceProgram byte

	ManufacturerData []byte
}

func (cmd *ApplianceSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NoOfManufacturerDataFields = (payload[i] & 0xF0) >> 4

	cmd.Properties1.ApplianceMode = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ApplianceProgram = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ManufacturerData = payload[i : i+0]
	i += 0

	return nil
}

func (cmd *ApplianceSet) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.NoOfManufacturerDataFields << byte(4)) & byte(0xF0)

		val |= (cmd.Properties1.ApplianceMode) & byte(0x0F)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.ApplianceProgram)

	if cmd.ManufacturerData != nil && len(cmd.ManufacturerData) > 0 {
		payload = append(payload, cmd.ManufacturerData...)
	}

	return
}
