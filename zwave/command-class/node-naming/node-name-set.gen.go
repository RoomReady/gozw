// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package nodenaming

import "errors"

// <no value>

type NodeNamingNodeNameSet struct {
	Level struct {
		CharPresentation byte
	}

	NodeNameChar string
}

func (cmd *NodeNamingNodeNameSet) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.CharPresentation = (payload[i] & 0x07)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeNameChar = string(payload[i : i+16])

	i += 16

	return nil
}

func (cmd *NodeNamingNodeNameSet) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Level.CharPresentation) & byte(0x07)

		payload = append(payload, val)
	}

	if paramLen := len(cmd.NodeNameChar); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter NodeNameChar")
	}

	payload = append(payload, []byte(cmd.NodeNameChar)...)

	return
}
