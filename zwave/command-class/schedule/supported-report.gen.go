// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package schedule

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ScheduleSupportedReport{})
}

// <no value>
type ScheduleSupportedReport struct {
	NumberOfSupportedScheduleId byte

	Properties1 struct {
		StartTimeSupport byte

		FallbackSupport bool

		SupportEnabledisable bool
	}

	NumberOfSupportedCc byte

	Properties3 struct {
		SupportedOverrideTypes byte

		OverrideSupport bool
	}
}

func (cmd *ScheduleSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedScheduleId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.StartTimeSupport = (payload[i] & 0x3F)

	if payload[i]&0x40 == 0x40 {
		cmd.Properties1.FallbackSupport = true
	} else {
		cmd.Properties1.FallbackSupport = false
	}

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.SupportEnabledisable = true
	} else {
		cmd.Properties1.SupportEnabledisable = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedCc = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.SupportedOverrideTypes = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties3.OverrideSupport = true
	} else {
		cmd.Properties3.OverrideSupport = false
	}

	i += 1

	return nil
}

func (cmd *ScheduleSupportedReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.NumberOfSupportedScheduleId)

	{
		var val byte

		val |= (cmd.Properties1.StartTimeSupport) & byte(0x3F)

		if cmd.Properties1.FallbackSupport {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.SupportEnabledisable {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfSupportedCc)

	{
		var val byte

		val |= (cmd.Properties3.SupportedOverrideTypes) & byte(0x7F)

		if cmd.Properties3.OverrideSupport {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
