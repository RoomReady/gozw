// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package schedule

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ScheduleStateReport{})
}

// <no value>
type ScheduleStateReport struct {
	NumberOfSupportedScheduleId byte

	Properties1 struct {
		ReportsToFollow byte

		Override bool
	}

	Properties2 struct {
		ActiveId1 byte

		ActiveId2 byte
	}

	Properties3 struct {
		ActiveId3 byte

		ActiveIdN byte
	}
}

func (cmd *ScheduleStateReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedScheduleId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ReportsToFollow = (payload[i] & 0xFE) >> 1

	if payload[i]&0x01 == 0x01 {
		cmd.Properties1.Override = true
	} else {
		cmd.Properties1.Override = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ActiveId1 = (payload[i] & 0x0F)

	cmd.Properties2.ActiveId2 = (payload[i] & 0xF0) >> 4

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.ActiveId3 = (payload[i] & 0x0F)

	cmd.Properties3.ActiveIdN = (payload[i] & 0xF0) >> 4

	i += 1

	return nil
}

func (cmd *ScheduleStateReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.NumberOfSupportedScheduleId)

	{
		var val byte

		val |= (cmd.Properties1.ReportsToFollow << byte(1)) & byte(0xFE)

		if cmd.Properties1.Override {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.ActiveId1) & byte(0x0F)

		val |= (cmd.Properties2.ActiveId2 << byte(4)) & byte(0xF0)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties3.ActiveId3) & byte(0x0F)

		val |= (cmd.Properties3.ActiveIdN << byte(4)) & byte(0xF0)

		payload = append(payload, val)
	}

	return
}
