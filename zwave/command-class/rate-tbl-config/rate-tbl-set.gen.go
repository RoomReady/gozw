// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package ratetblconfig

import (
	"encoding/binary"
	"errors"
)

// <no value>

type RateTblSet struct {
	RateParameterSetId byte

	Properties1 struct {
		NumberOfRateChar byte

		RateType byte
	}

	RateCharacter []byte

	StartHourLocalTime byte

	StartMinuteLocalTime byte

	DurationMinute uint16

	Properties2 struct {
		ConsumptionScale byte

		ConsumptionPrecision byte
	}

	MinConsumptionValue uint32

	MaxConsumptionValue uint32

	Properties3 struct {
		MaxDemandScale byte

		MaxDemandPrecision byte
	}

	MaxDemandValue uint32

	DcpRateId byte
}

func (cmd *RateTblSet) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RateParameterSetId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NumberOfRateChar = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RateCharacter = payload[i : i+1]
	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartHourLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartMinuteLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DurationMinute = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ConsumptionScale = (payload[i] & 0x1F)

	cmd.Properties2.ConsumptionPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinConsumptionValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaxConsumptionValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.MaxDemandScale = (payload[i] & 0x1F)

	cmd.Properties3.MaxDemandPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MaxDemandValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DcpRateId = payload[i]
	i++

	return nil
}

func (cmd *RateTblSet) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.RateParameterSetId)

	{
		var val byte

		val |= (cmd.Properties1.NumberOfRateChar) & byte(0x1F)

		val |= (cmd.Properties1.RateType << byte(5)) & byte(0x60)

		payload = append(payload, val)
	}

	if cmd.RateCharacter != nil && len(cmd.RateCharacter) > 0 {
		payload = append(payload, cmd.RateCharacter...)
	}

	payload = append(payload, cmd.StartHourLocalTime)

	payload = append(payload, cmd.StartMinuteLocalTime)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.DurationMinute)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties2.ConsumptionScale) & byte(0x1F)

		val |= (cmd.Properties2.ConsumptionPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MinConsumptionValue)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaxConsumptionValue)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties3.MaxDemandScale) & byte(0x1F)

		val |= (cmd.Properties3.MaxDemandPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaxDemandValue)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.DcpRateId)

	return
}
