// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package sensoralarm

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(SensorAlarmSupportedReport{})
}

// <no value>
type SensorAlarmSupportedReport struct {
	NumberOfBitMasks byte

	BitMask []byte
}

func (cmd *SensorAlarmSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfBitMasks = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.BitMask = payload[i : i+0]
	i += 0

	return nil
}

func (cmd *SensorAlarmSupportedReport) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.NumberOfBitMasks)

	if cmd.BitMask != nil && len(cmd.BitMask) > 0 {
		payload = append(payload, cmd.BitMask...)
	}

	return
}
