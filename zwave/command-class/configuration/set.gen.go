// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package configuration

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ConfigurationSet{})
}

// <no value>
type ConfigurationSet struct {
	ParameterNumber byte

	Level struct {
		Size byte

		Default bool
	}

	ConfigurationValue []byte
}

func (cmd *ConfigurationSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ParameterNumber = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.Size = (payload[i] & 0x07)

	if payload[i]&0x80 == 0x80 {
		cmd.Level.Default = true
	} else {
		cmd.Level.Default = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ConfigurationValue = payload[i : i+1]
	i += 1

	return nil
}

func (cmd *ConfigurationSet) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.ParameterNumber)

	{
		var val byte

		val |= (cmd.Level.Size) & byte(0x07)

		if cmd.Level.Default {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	if cmd.ConfigurationValue != nil && len(cmd.ConfigurationValue) > 0 {
		payload = append(payload, cmd.ConfigurationValue...)
	}

	return
}
