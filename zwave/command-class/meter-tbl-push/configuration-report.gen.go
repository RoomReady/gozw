// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package metertblpush

import (
	"encoding/binary"
	"errors"
)

// <no value>

type MeterTblPushConfigurationReport struct {
	Properties1 struct {
		OperatingStatusPushMode byte

		Ps bool
	}

	PushDataset uint32

	IntervalMonths byte

	IntervalDays byte

	IntervalHours byte

	IntervalMinutes byte

	PushNodeId byte
}

func (cmd *MeterTblPushConfigurationReport) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.OperatingStatusPushMode = (payload[i] & 0x0F)

	if payload[i]&0x10 == 0x10 {
		cmd.Properties1.Ps = true
	} else {
		cmd.Properties1.Ps = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PushDataset = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalMonths = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalDays = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalHours = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalMinutes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PushNodeId = payload[i]
	i++

	return nil
}

func (cmd *MeterTblPushConfigurationReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.OperatingStatusPushMode) & byte(0x0F)

		if cmd.Properties1.Ps {
			val |= byte(0x10) // flip bits on
		} else {
			val &= ^byte(0x10) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.PushDataset)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	payload = append(payload, cmd.IntervalMonths)

	payload = append(payload, cmd.IntervalDays)

	payload = append(payload, cmd.IntervalHours)

	payload = append(payload, cmd.IntervalMinutes)

	payload = append(payload, cmd.PushNodeId)

	return
}
