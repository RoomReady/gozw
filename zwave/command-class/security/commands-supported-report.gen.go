// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package security

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(CommandsSupportedReport{})
}

// <no value>
type CommandsSupportedReport struct {
	ReportsToFollow byte

	CommandClassSupport []byte

	CommandClassControl []byte
}

func (cmd CommandsSupportedReport) CommandClassID() byte {
	return 0x98
}

func (cmd CommandsSupportedReport) CommandID() byte {
	return byte(CommandCommandsSupportedReport)
}

func (cmd *CommandsSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ReportsToFollow = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	{
		fieldStart := i
		for ; i < len(payload) && payload[i] != 0xEF; i++ {
		}
		cmd.CommandClassSupport = payload[fieldStart:i]
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	i += 1 // skipping MARKER
	if len(payload) <= i {
		return nil
	}

	if len(payload) <= i {
		return nil
	}

	cmd.CommandClassControl = payload[i:]

	return nil
}

func (cmd *CommandsSupportedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = cmd.CommandClassID()
	payload[1] = cmd.CommandID()

	payload = append(payload, cmd.ReportsToFollow)

	{
		if cmd.CommandClassSupport != nil && len(cmd.CommandClassSupport) > 0 {
			payload = append(payload, cmd.CommandClassSupport...)
		}
		payload = append(payload, 0xEF)
	}

	payload = append(payload, 0xEF) // marker

	payload = append(payload, cmd.CommandClassControl...)

	return
}
