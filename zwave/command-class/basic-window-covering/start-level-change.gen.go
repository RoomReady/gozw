// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package basicwindowcovering

import "errors"

// <no value>

type BasicWindowCoveringStartLevelChange struct {
	Level struct {
		OpenClose bool
	}
}

func (cmd *BasicWindowCoveringStartLevelChange) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if payload[i]&0x40 == 0x40 {
		cmd.Level.OpenClose = true
	} else {
		cmd.Level.OpenClose = false
	}

	i += 1

	return nil
}

func (cmd *BasicWindowCoveringStartLevelChange) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		if cmd.Level.OpenClose {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
