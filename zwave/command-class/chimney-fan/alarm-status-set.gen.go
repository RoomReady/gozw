// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package chimneyfan

import "errors"

// <no value>

type ChimneyFanAlarmStatusSet struct {
	Message struct {
		NotUsed2 byte

		NotUsed1 bool

		AcknowledgeExternalAlarm bool

		AcknowledgeSensorError bool

		AcknowledgeAlarmTemperatureExceeded bool
	}
}

func (cmd *ChimneyFanAlarmStatusSet) UnmarshalBinary(payload []byte) error {
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Message.NotUsed2 = (payload[i] & 0xF0) >> 4

	if payload[i]&0x01 == 0x01 {
		cmd.Message.NotUsed1 = true
	} else {
		cmd.Message.NotUsed1 = false
	}

	if payload[i]&0x02 == 0x02 {
		cmd.Message.AcknowledgeExternalAlarm = true
	} else {
		cmd.Message.AcknowledgeExternalAlarm = false
	}

	if payload[i]&0x04 == 0x04 {
		cmd.Message.AcknowledgeSensorError = true
	} else {
		cmd.Message.AcknowledgeSensorError = false
	}

	if payload[i]&0x08 == 0x08 {
		cmd.Message.AcknowledgeAlarmTemperatureExceeded = true
	} else {
		cmd.Message.AcknowledgeAlarmTemperatureExceeded = false
	}

	i += 1

	return nil
}

func (cmd *ChimneyFanAlarmStatusSet) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Message.NotUsed2 << byte(4)) & byte(0xF0)

		if cmd.Message.NotUsed1 {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.Message.AcknowledgeExternalAlarm {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		if cmd.Message.AcknowledgeSensorError {
			val |= byte(0x04) // flip bits on
		} else {
			val &= ^byte(0x04) // flip bits off
		}

		if cmd.Message.AcknowledgeAlarmTemperatureExceeded {
			val |= byte(0x08) // flip bits on
		} else {
			val &= ^byte(0x08) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
