// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package basictariffinfo

import (
	"encoding/binary"
	"errors"
)

// <no value>

type BasicTariffInfoReport struct {
	Properties1 struct {
		TotalNoImportRates byte

		Dual bool
	}

	Properties2 struct {
		E1CurrentRateInUse byte
	}

	E1RateConsumptionRegister uint32

	E1TimeForNextRateHours byte

	E1TimeForNextRateMinutes byte

	E1TimeForNextRateSeconds byte

	Properties3 struct {
		E2CurrentRateInUse byte
	}

	E2RateConsumptionRegister uint32
}

func (cmd *BasicTariffInfoReport) UnmarshalBinary(payload []byte) error {
	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.TotalNoImportRates = (payload[i] & 0x0F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Dual = true
	} else {
		cmd.Properties1.Dual = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.E1CurrentRateInUse = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.E1RateConsumptionRegister = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.E1TimeForNextRateHours = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.E1TimeForNextRateMinutes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.E1TimeForNextRateSeconds = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.E2CurrentRateInUse = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.E2RateConsumptionRegister = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	return nil
}
