// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package networkmanagementprimary

import (
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ControllerChangeStatus{})
}

// <no value>
type ControllerChangeStatus struct {
	SeqNo byte

	Status byte

	NewNodeId byte

	NodeInfoLength byte

	Properties1 struct {
		Capability byte

		Listening bool
	}

	Properties2 struct {
		Security byte

		Opt bool
	}

	BasicDeviceClass byte

	GenericDeviceClass byte

	SpecificDeviceClass byte

	CommandClass []byte
}

func (cmd *ControllerChangeStatus) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Status = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NewNodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeInfoLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Capability = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Listening = true
	} else {
		cmd.Properties1.Listening = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.Security = (payload[i] & 0x7F)

	if payload[i]&0x80 == 0x80 {
		cmd.Properties2.Opt = true
	} else {
		cmd.Properties2.Opt = false
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.BasicDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GenericDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SpecificDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClass = payload[i:]

	return nil
}

func (cmd *ControllerChangeStatus) MarshalBinary() (payload []byte, err error) {

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.Status)

	payload = append(payload, cmd.NewNodeId)

	payload = append(payload, cmd.NodeInfoLength)

	{
		var val byte

		val |= (cmd.Properties1.Capability) & byte(0x7F)

		if cmd.Properties1.Listening {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.Security) & byte(0x7F)

		if cmd.Properties2.Opt {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.BasicDeviceClass)

	payload = append(payload, cmd.GenericDeviceClass)

	payload = append(payload, cmd.SpecificDeviceClass)

	payload = append(payload, cmd.CommandClass...)

	return
}
