// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package configurationv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(ConfigurationBulkReport{})
}

// <no value>
type ConfigurationBulkReport struct {
	ParameterOffset uint16

	NumberOfParameters byte

	ReportsToFollow byte

	Properties1 struct {
		Size byte

		Handshake bool

		Default bool
	}
}

func (cmd *ConfigurationBulkReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ParameterOffset = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfParameters = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ReportsToFollow = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Size = (payload[i] & 0x07)

	if payload[i]&0x40 == 0x40 {
		cmd.Properties1.Handshake = true
	} else {
		cmd.Properties1.Handshake = false
	}

	if payload[i]&0x80 == 0x80 {
		cmd.Properties1.Default = true
	} else {
		cmd.Properties1.Default = false
	}

	i += 1

	return nil
}

func (cmd *ConfigurationBulkReport) MarshalBinary() (payload []byte, err error) {

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ParameterOffset)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.NumberOfParameters)

	payload = append(payload, cmd.ReportsToFollow)

	{
		var val byte

		val |= (cmd.Properties1.Size) & byte(0x07)

		if cmd.Properties1.Handshake {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.Default {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
