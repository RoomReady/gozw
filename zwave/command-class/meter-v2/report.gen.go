// THIS FILE IS AUTO-GENERATED BY CCGEN
// DO NOT MODIFY

package meterv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"
)

func init() {
	gob.Register(MeterReport{})
}

// <no value>
type MeterReport struct {
	Properties1 struct {
		MeterType byte

		RateType byte
	}

	Properties2 struct {
		Size byte

		Scale byte

		Precision byte
	}

	MeterValue []byte

	DeltaTime uint16

	PreviousMeterValue []byte
}

func (cmd *MeterReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning
	payload := make([]byte, len(data))
	copy(payload, data)
	i := 0

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MeterType = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.Size = (payload[i] & 0x07)

	cmd.Properties2.Scale = (payload[i] & 0x18) >> 3

	cmd.Properties2.Precision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MeterValue = payload[i : i+1]
	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DeltaTime = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PreviousMeterValue = payload[i : i+1]
	i += 1

	return nil
}

func (cmd *MeterReport) MarshalBinary() (payload []byte, err error) {

	{
		var val byte

		val |= (cmd.Properties1.MeterType) & byte(0x1F)

		val |= (cmd.Properties1.RateType << byte(5)) & byte(0x60)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.Size) & byte(0x07)

		val |= (cmd.Properties2.Scale << byte(3)) & byte(0x18)

		val |= (cmd.Properties2.Precision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.MeterValue != nil && len(cmd.MeterValue) > 0 {
		payload = append(payload, cmd.MeterValue...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.DeltaTime)
		payload = append(payload, buf...)
	}

	if cmd.PreviousMeterValue != nil && len(cmd.PreviousMeterValue) > 0 {
		payload = append(payload, cmd.PreviousMeterValue...)
	}

	return
}
