package gen

import (
	"io"
)

func (g *Generator) GenerateDevices(w io.Writer) (err error) {
	_, err = writeStrings(w,
		"// THIS FILE IS AUTO-GENERATED BY ZWGEN\n",
		"// DO NOT MODIFY\n\n",
		"package cc\n\n",
		"const (\n",
	)
	if err != nil {
		return
	}
	for _, bd := range g.zwClasses.BasicDevices {
		writeStrings(w,
			"\t", toGoName(bd.Name), " BasicDeviceType = ", bd.Key, "\n",
		)
		if err != nil {
			return err
		}
	}
	_, err = writeStrings(w,
		")\n\n",
		"var BasicDeviceTypeNames = map[BasicDeviceType]string{\n",
	)
	if err != nil {
		return
	}
	for _, bd := range g.zwClasses.BasicDevices {
		_, err = writeStrings(w,
			"\t", toGoName(bd.Name), ": \"", bd.Help, "\",\n",
		)
		if err != nil {
			return
		}
	}
	_, err = writeStrings(w,
		"}\n\n",
		"const (\n",
	)
	if err != nil {
		return
	}
	for _, gd := range g.zwClasses.GenericDevices {
		_, err = writeStrings(w,
			"\t", toGoName(gd.Name), " GenericDeviceType = ", gd.Key, "\n",
		)
		if err != nil {
			return err
		}
	}
	_, err = writeStrings(w,
		")\n\n",
		"var GenericDeviceTypeNames = map[GenericDeviceType]string{\n",
	)
	if err != nil {
		return
	}
	for _, gd := range g.zwClasses.GenericDevices {
		_, err = writeStrings(w,
			"\t", toGoName(gd.Name), ": \"", gd.Help, "\",\n",
		)
		if err != nil {
			return
		}
	}
	_, err = writeStrings(w,
		"}\n\n",
		"const (\n",
		"\tSpecificTypeNotUsed SpecificDeviceType = 0x00\n",
	)
	if err != nil {
		return
	}
	for _, gd := range g.zwClasses.GenericDevices {
		for _, sd := range gd.SpecificDevices {
			if sd.Key != "0x00" {
				_, err = writeStrings(w,
					"\t", toGoName(sd.Name), " SpecificDeviceType = ", sd.Key, "\n",
				)
				if err != nil {
					return
				}
			}
		}
	}
	_, err = writeStrings(w,
		")\n\n",
		"var SpecificDeviceTypeNames = map[GenericDeviceType]map[SpecificDeviceType]string{\n",
	)
	if err != nil {
		return
	}
	for _, gd := range g.zwClasses.GenericDevices {
		_, err = writeStrings(w,
			"\t", toGoName(gd.Name), ": {\n",
		)
		if err != nil {
			return
		}
		for _, sd := range gd.SpecificDevices {
			_, err = writeStrings(w,
				"\t\t", toGoName(sd.Name), ": \"", sd.Help, "\",\n",
			)
			if err != nil {
				return
			}
		}
		_, err = writeStrings(w, "\t},\n")
		if err != nil {
			return
		}
	}
	_, err = writeStrings(w, "}\n")
	return
}
